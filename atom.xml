<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[a cuppa appa]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://appapappa.com/"/>
  <updated>2015-05-19T15:48:19.000Z</updated>
  <id>http://appapappa.com/</id>
  
  <author>
    <name><![CDATA[Arun Rajappa]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Getting started with Hexo]]></title>
    <link href="http://appapappa.com/2015/05/19/getting-started-with-hexo/"/>
    <id>http://appapappa.com/2015/05/19/getting-started-with-hexo/</id>
    <published>2015-05-19T14:42:56.000Z</published>
    <updated>2015-05-19T15:48:19.000Z</updated>
    <content type="html"><![CDATA[<p>I decided last week to get back to blogging last week. I was looking an alternative to <a href="https://wordpress.com/" target="_blank" rel="external">Wordpress</a>, which I was tired of for many reasons:</p>
<ul>
<li>It felt big &amp; slow</li>
<li>It felt “closed” &amp; old.</li>
<li>It wasn’t developer friendly:<br>  — I wanted to put write in Markdown<br>  — I wanted to put in code blocks and have them formatted.</li>
</ul>
<p>After a bit of Googling, I saw that <a href="http://jekyllrb.com/" target="_blank" rel="external">Jekyll</a> with <a href="https://pages.github.com/" target="_blank" rel="external">GitHub pages</a> for hosting was a popular option. Though this looked promising, I just couldn’t wrap my head around Jekyll. It was bigger than what I had in mind, and just didn’t fit me. GitHub pages seemed sweet though.</p>
<p>The search continued, and then I found <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>. It was love at first sight. The initial set up was painless, there were many themes and plugins and the write/publish workflow was smooth.</p>
<p>Here’s my guide on <strong>“Getting started with Hexo”</strong>, follow along and let’s get a bit of lovin’ over to you!</p>
<h2 id="The_initial_set_up">The initial set up</h2><p>Assuming you have node installed on your machine, this is fairly simple. On my Mac, this installs the hexo command line interface:<br><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo npm install -<span class="keyword">g</span> hexo-<span class="keyword">cli</span></span><br></pre></td></tr></table></figure></p>
<p>After this, I initialized my blog directory &amp; saved the node modules needed for the blog to render:<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo init appapappa</span><br><span class="line"><span class="variable">$ </span>npm install hexo --save</span><br></pre></td></tr></table></figure></p>
<p>This done, I was all set to power up hexo and check-it out:</p>
<figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="keyword">server</span></span><br></pre></td></tr></table></figure>
<p>And then power up Chrome at <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> to see something like this…</p>
<p>This done, it was time to configure hexo. Hexo has a very simple YAML config file under _config.yml.</p>
<p>This is how my config file started to look after a few simple customizations; the main things I changed were the title, the author, the language (to en), the URL and the default category from uncategorized to journal.</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"># Site</span><br><span class="line"><span class="string">title:</span> a cuppa appa</span><br><span class="line"><span class="string">subtitle:</span></span><br><span class="line"><span class="string">description:</span></span><br><span class="line"><span class="string">author:</span> Arun Rajappa</span><br><span class="line"><span class="string">language:</span> en</span><br><span class="line"><span class="string">timezone:</span></span><br><span class="line"></span><br><span class="line"># URL</span><br><span class="line">## If your site is put <span class="keyword">in</span> a subdirectory, set url <span class="keyword">as</span> <span class="string">'http://yoursite.com/child'</span> and root <span class="keyword">as</span> <span class="string">'/child/'</span></span><br><span class="line"><span class="string">url:</span> <span class="string">http:</span><span class="comment">//appapappa.com</span></span><br><span class="line"><span class="string">root:</span> /</span><br><span class="line"><span class="string">permalink:</span> :year<span class="regexp">/:month/</span>:day<span class="regexp">/:title/</span></span><br><span class="line"><span class="string">permalink_defaults:</span></span><br><span class="line"></span><br><span class="line"># Directory</span><br><span class="line"><span class="string">source_dir:</span> source</span><br><span class="line"><span class="string">public_dir:</span> <span class="keyword">public</span></span><br><span class="line"><span class="string">tag_dir:</span> tags</span><br><span class="line"><span class="string">archive_dir:</span> archives</span><br><span class="line"><span class="string">category_dir:</span> categories</span><br><span class="line"><span class="string">code_dir:</span> downloads/code</span><br><span class="line"><span class="string">i18n_dir:</span> :lang</span><br><span class="line"><span class="string">skip_render:</span></span><br><span class="line"></span><br><span class="line"># Writing</span><br><span class="line"><span class="string">new_post_name:</span> :title.md # File name of <span class="keyword">new</span> posts</span><br><span class="line"><span class="string">default_layout:</span> post</span><br><span class="line"><span class="string">titlecase:</span> <span class="literal">false</span> # Transform title into titlecase</span><br><span class="line"><span class="string">external_link:</span> <span class="literal">true</span> # Open external links <span class="keyword">in</span> <span class="keyword">new</span> tab</span><br><span class="line"><span class="string">filename_case:</span> <span class="number">0</span></span><br><span class="line"><span class="string">render_drafts:</span> <span class="literal">false</span></span><br><span class="line"><span class="string">post_asset_folder:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">relative_link:</span> <span class="literal">false</span></span><br><span class="line"><span class="string">future:</span> <span class="literal">true</span></span><br><span class="line"><span class="string">highlight:</span></span><br><span class="line"><span class="label">  enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="label">  line_number:</span> <span class="literal">true</span></span><br><span class="line"><span class="label">  tab_replace:</span></span><br><span class="line"></span><br><span class="line"># Category &amp; Tag</span><br><span class="line"><span class="string">default_category:</span> journal</span><br><span class="line"><span class="string">category_map:</span></span><br><span class="line"><span class="string">tag_map:</span></span><br><span class="line"></span><br><span class="line"># Date / Time format</span><br><span class="line">## Hexo uses Moment.js to parse and display date</span><br><span class="line">## You can customize the date format <span class="keyword">as</span> defined <span class="keyword">in</span></span><br><span class="line">## <span class="string">http:</span><span class="comment">//momentjs.com/docs/#/displaying/format/</span></span><br><span class="line"><span class="string">date_format:</span> YYYY-MM-DD</span><br><span class="line"><span class="string">time_format:</span> <span class="string">HH:</span><span class="string">mm:</span>ss</span><br><span class="line"></span><br><span class="line"># Pagination</span><br><span class="line">## Set per_page to <span class="number">0</span> to disable pagination</span><br><span class="line"><span class="string">per_page:</span> <span class="number">10</span></span><br><span class="line"><span class="string">pagination_dir:</span> page</span><br><span class="line"></span><br><span class="line"># Extensions</span><br><span class="line">## <span class="string">Plugins:</span> <span class="string">http:</span><span class="comment">//hexo.io/plugins/</span></span><br><span class="line">## <span class="string">Themes:</span> <span class="string">http:</span><span class="comment">//hexo.io/themes/</span></span><br><span class="line"><span class="string">theme:</span> landscape</span><br></pre></td></tr></table></figure>
<h2 id="Themes_:_Install_&amp;_Configure">Themes : Install &amp; Configure</h2><p>Working with themes is easy in Hexo, so this is what I did next: I looked at the themes available for Hexo, and decided to get the Hueman theme which looked good:<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/ppoffice</span><span class="regexp">/hexo-theme-hueman.git themes/hueman</span></span><br></pre></td></tr></table></figure></p>
<p>I then had to make a few changes to configure this, firstly in the _config.yml in the root directory, I changed the theme from landscape to hueman:<br><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">theme</span>: <span class="string">hueman</span></span><br></pre></td></tr></table></figure></p>
<p>I also read up the documentation about Hueman and configured it like so, by modifying the _config.yml under the themes/hueman directory:<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Logo Url</span></span><br><span class="line"><span class="comment"># Please enter the absolute path to your logo file</span></span><br><span class="line"><span class="comment"># or remove the following line with replacing logo-header.png with your own logo</span></span><br><span class="line"><span class="comment"># logo:</span></span><br><span class="line"><span class="comment"># Header</span></span><br><span class="line">menu:</span><br><span class="line">  Home: /</span><br><span class="line">  <span class="comment"># Delete this row if you don't want categories in your header nav bar</span></span><br><span class="line">  Categories:</span><br><span class="line">  About: /about/index.html</span><br><span class="line"></span><br><span class="line"><span class="comment"># Article list grouped by year</span></span><br><span class="line">groupByYear: <span class="constant">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Content</span></span><br><span class="line">fancybox: <span class="constant">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Thumbnail</span></span><br><span class="line">thumbnail: <span class="constant">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Scroll Loading</span></span><br><span class="line">scrollLoading: <span class="constant">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Sidebar</span></span><br><span class="line">social_links:</span><br><span class="line">  twitter: <span class="keyword">http</span>://twitter.com/appa</span><br><span class="line">  github: <span class="keyword">https</span>://github.com/arunr</span><br><span class="line">  rss: atom.xml</span><br><span class="line">widgets:</span><br><span class="line">- recent_posts</span><br><span class="line">- category</span><br><span class="line">- archive</span><br><span class="line">- links</span><br><span class="line"></span><br><span class="line"><span class="comment"># Links</span></span><br><span class="line">links:</span><br><span class="line">  Twyst: <span class="keyword">http</span>://twyst.<span class="operator">in</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Don't Use Google APIs if you are in google-blocked areas</span></span><br><span class="line">use_google_apis: <span class="constant">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Miscellaneous</span></span><br><span class="line">google_analytics:</span><br><span class="line">favicon: /favicon.png</span><br><span class="line">fb_admins:</span><br><span class="line">fb_app_id:</span><br></pre></td></tr></table></figure></p>
<p>Since many of my posts didn’t have thumbnails, I set thumnail to false, I set up the social links correctly, removed the tag and tagcloud widgets that I didn’t want, set up the links I wanted and left it at that for the moment.</p>
<p>With my theme configured, it was looking like this now:</p>
<p>I then created a new post, and edited it with my favourite markdown editor, <a href="http://atom.io" target="_blank" rel="external">Atom.io</a>:<br><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> blog_ready</span><br></pre></td></tr></table></figure></p>
<p>When editing my new posts, there’s a bit of configuration at the top of each post that allows Hexo to give it a title, tags, categories etc. That’s this section:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">title: &#34;Getting started with Hexo&#34;&#10;date: 2015-05-19 20:12:56&#10;tags:&#10;categories:&#10;  - tech&#10;---</span><br></pre></td></tr></table></figure>
<p>And below that is just beautiful, simple content in Markdown. Now it was time to publish my awesome blog…</p>
<h2 id="Publishing_to_GitHub_&amp;_setting_up_GoDaddy">Publishing to GitHub &amp; setting up GoDaddy</h2><p>Publishing to GitHub is fairly painless. There is some initial set up to do on GitHub, which is captured well <a href="https://pages.github.com/" target="_blank" rel="external">here</a>. All you need to do though is just the first step: to create a new repo on GitHub called <em>username</em>.github.io.</p>
<p>After that, install the Git Deployer plugin:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="operator"><span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure></p>
<p>After that, you need to change your _config.yml file in the root directory of your blog like this:</p>
<figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">deploy</span>:</span><br><span class="line">  <span class="attribute">type</span>: git</span><br><span class="line">  <span class="attribute">repo</span>: <span class="attribute">https</span>:<span class="comment">//github.com/_username_/&lt;username&gt;.github.io</span></span><br></pre></td></tr></table></figure>
<p>Now, you should be all set to deploy! Run<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo deploy</span><br></pre></td></tr></table></figure></p>
<p>And then visit <a href="http://_username_.github.io" target="_blank" rel="external">http://_username_.github.io</a> to see your blog show up (if everything goes well!).</p>
<p>To configure your own domain, things couldn’t be simpler:</p>
<ol>
<li><p>Go to GoDaddy (or your domain provider) and add an A Record for the following IP address in your domain management:</p>
<ul>
<li>192.30.252.153</li>
<li>192.30.252.154</li>
</ul>
</li>
<li><p>In your GitHub repo (<em>username</em>.github.io), create a file called CNAME that just has the name of your domain (appapappa.com).</p>
</li>
</ol>
<p>That’s it - after this visit <a href="http://domainname.com" target="_blank" rel="external">http://domainname.com</a> and you’ll see your blog up!</p>
<h2 id="Migrating_content_from_WordPress">Migrating content from WordPress</h2><p>The next step was to get over the content from my existing Wordpress blog. This was very painless too. First, I had to install the Wordpress Migrator plugin</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="operator"><span class="keyword">install</span> hexo-migrator-wordpress <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure>
<p>Then, I went into my WordPress admin panel and exported all my content. After that, it was easy-peasy:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo migrate wordpress ~<span class="regexp">/Downloads/appapappa</span>.xml</span><br></pre></td></tr></table></figure>
<p>With that done, I could see all my posts migrated into the _posts folder of Hexo (under source). I visited <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> and checked that all my WordPress content was there - cool!</p>
<h2 id="Tag_plugins">Tag plugins</h2><p>When checking my WordPress migrated content, I noticed that some of my posts didn’t show up correctly - esepecially the ones with references to YouTube or <a href="https://gist.github.com/" target="_blank" rel="external">Gists</a> embedded in them. This required fixing up, using what Hexo calls “Tag plugins”, but it couldn’t have been easier:</p>
<ol>
<li><p>For YouTube: just edit your migrated WordPress post, and put in the fragment below to handle showing videos from YouTube.</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="preprocessor">%</span> youtube video_id <span class="preprocessor">%</span>&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>For Gists: edit your migrated WordPress post, and put in this fragment to embed the Gist.</p>
<figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="preprocessor">%</span> gist gist_id <span class="preprocessor">%</span>&#125;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>Hexo has a number of other tag plugins, all listed <a href="https://hexo.io/docs/tag-plugins.html" target="_blank" rel="external">here</a></p>
<h2 id="Configuring_a_few_other_things…">Configuring a few other things…</h2><p>This were looking sweet now - I had my theme figured out, had written a post, deployed to GitHub and my own domain, migrated my WordPress content and even fixed up issues with them. What could be left? Well there were a number of things, lets look at each of them:</p>
<ol>
<li><strong>Comments</strong>: At this time, I noticed that I didn’t have comments on my blog. Now, what is a blog without comments? Boring, that’s what! The way Hexo fixes this up is by integrating <a href="https://disqus.com/" target="_blank" rel="external">Disqus</a> into your blog. To do this, you will need to sign-up for Disqus, and then once you have your Disqus ID, add this to your _config.yml file:</li>
</ol>
<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">disqus_shortname</span>: <span class="string">&lt;your shortname&gt;</span></span><br></pre></td></tr></table></figure>
<p>That’s it - you’ll have comments enabled on your posts now!</p>
<ol>
<li><strong>RSS</strong>: I also wanted for my blog to show up as an Atom/RSS feed. For this, I needed to do three things. Firstly, I had to install the RSS plugin.<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="operator"><span class="keyword">install</span> hexo-generator-feed <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>I then had to update the _config.yml file in the root directory with this:<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">feed</span>:</span><br><span class="line">  <span class="attribute">type</span>: atom</span><br><span class="line">  <span class="attribute">path</span>: atom.xml</span><br><span class="line">  <span class="attribute">limit</span>: <span class="number">20</span></span><br></pre></td></tr></table></figure></p>
<p>I then had to update the _config.yml file in the Hueman theme directory, so I could link to the RSS feed:<br><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">social_links</span>:</span><br><span class="line">  <span class="attribute">rss</span>: atom.xml</span><br></pre></td></tr></table></figure></p>
<ol>
<li><strong>Search</strong>: For this, I had to do two things - sign-up for <a href="https://www.google.com/webmasters/tools/" target="_blank" rel="external">Google Webmaster Tools</a>, and then submit the sitemap.xml. To create the sitemap.xml, this is what I did:<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm <span class="operator"><span class="keyword">install</span> hexo-generator-sitemap <span class="comment">--save</span></span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>Once that’s done, re-generate your blog which will create the sitemap, and submit the sitemap.xml to Google, in the Webmaster Tools UI.<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo generate</span><br></pre></td></tr></table></figure></p>
<ol>
<li>Analytics: This was very simple, you just need to sign-up for <a href="http://www.google.com/analytics/" target="_blank" rel="external">Google Analytics</a>, and once you have a tracking ID, update your blog _config.yml with this information:<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">google_analytics</span>: <span class="string">&lt;your tracking ID&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>All set now - comments, search, analytics and RSS all set up!</p>
<h2 id="Write-Publish_workflow">Write-Publish workflow</h2><p>Whew, the initial set-up took some time, but now my workflow is really simple:</p>
<ol>
<li><p>Create a new post</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> &lt;postname&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Write the post using my favourite editor, Atom.IO.</p>
</li>
<li><p>Deploy to my blog after verifying locally:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>hexo deploy</span><br></pre></td></tr></table></figure>
</li>
</ol>
<p>And that’s it!</p>
<h2 id="Closing_thoughts">Closing thoughts</h2><p>I’m really liking Hexo, and haven’t found anything wanting in it so far. I can write posts in Markdown, with code blogs, and deploy to my domain very easily.</p>
<p>The only thing I may want is more variety of themes - but the nice thing is that I could imagine me being able to do this myself.</p>
<p>My verdict: Hexo is a fantastic platform for developers, and if you are writing about programming or technology, definitely give Hexo a spin!</p>
<p>Happy blogging, <a href="http://www.twitter.com/appa" target="_blank" rel="external">@appa</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I decided last week to get back to blogging last week. I was looking an alternative to <a href="https://wordpress.com/" target="_blank" r]]>
    </summary>
    
      <category term="Tech" scheme="http://appapappa.com/categories/Tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Material Design with AngularJS]]></title>
    <link href="http://appapappa.com/2015/05/16/material_design/"/>
    <id>http://appapappa.com/2015/05/16/material_design/</id>
    <published>2015-05-16T10:10:55.000Z</published>
    <updated>2015-05-17T14:55:03.000Z</updated>
    <content type="html"><![CDATA[<p><img src="https://www.anony.ws/i/2015/05/15/airpair2462aa.png" alt="img caption"></p>
<h2 id="The_back_story">The back story</h2><p>In my <a href="https://www.airpair.com/angularjs/posts/travel-app-in-2-hours" target="_blank" rel="external">earlier post</a>, I had written about how I built a travel app in a couple of hours using Sabre and LumX. At the end of that post I wrote that I wasn’t very happy with the UI. <a href="http://ui.lumapps.com/" target="_blank" rel="external">LumX</a> had looked good as a UI framework, but I wasn’t able to get <em>productive</em> with it: there weren’t enough examples, and the documentation wasn’t great.</p>
<p>At the same time, I was intrigued by this material design thing… Were there other options out there? Could I improve the UI for the Travel App quickly? Let’s find out…</p>
<h2 id="What_is_Material_Design,_anyway?">What is Material Design, anyway?</h2><p>Google <a href="https://developer.android.com/design/material/index.html" target="_blank" rel="external">says</a>:</p>
<blockquote>
<p>Material design is a comprehensive guide for visual, motion, and interaction design across platforms and devices.</p>
</blockquote>
<p><a href="http://en.wikipedia.org/wiki/Material_design" target="_blank" rel="external">Wikipedia</a> is clearer and more useful!</p>
<blockquote>
<p>Material design (codenamed quantum paper) is a design language developed by Google and announced at the Google I/O conference on June 25, 2014. Expanding upon the “card” motifs first seen in Google Now, it is a design with increased use of grid-based layouts, responsive animations and transitions, padding, and depth effects such as lighting and shadows.</p>
</blockquote>
<p>So, basically, it is a design language from Google that works across device form factors, that combines simple elements like lists &amp; cards with animations, lighting and shadow to produce beautiful UI. As always, a picture is worth a thousand words:</p>
<p><img src="https://developer.android.com/design/material/images/list_mail.png" alt="Material Design"></p>
<h2 id="Can_I_do_Material_Design_with_AngularJS?">Can I do Material Design with AngularJS?</h2><p>This is what I wanted to do - explore this Material Design thing with AngularJS. I searched, and found a few good “list of UI frameworks for Material Design” (<a href="http://www.noupe.com/design/in-vogue-9-material-design-frameworks-for-cutting-edge-websites-90808.html" target="_blank" rel="external">here</a>, <a href="http://superdevresources.com/material-design-web-ui-frameworks/" target="_blank" rel="external">here</a> and <a href="http://www.noupe.com/design/in-vogue-9-material-design-frameworks-for-cutting-edge-websites-90808.html" target="_blank" rel="external">here</a>) kind of articles that gave me pointers to my options, which I narrowed down to be:</p>
<ul>
<li><strong><a href="http://ui.lumapps.com/" target="_blank" rel="external">LumX</a></strong>: I had already tried it, and wasn’t happy with it</li>
<li><strong><a href="http://bootswatch.com/paper/#" target="_blank" rel="external">Bootstrap Paper</a></strong>: Didn’t look the best, and not really AngularJS - built on Bootstrap.</li>
<li><strong><a href="https://www.polymer-project.org/" target="_blank" rel="external">Polymer Project</a></strong>: Seemed too cutting edge, and yet, not much action was happening around it. Wasn’t sure if I could use it with AngularJS.</li>
<li><strong><a href="http://ionicmaterial.com/" target="_blank" rel="external">Ionic Material</a></strong>: Looked beautiful &amp; really interesting: maybe for my next post when I’m doing a mobile app?!</li>
<li>And finally… <strong><a href="https://material.angularjs.org/#/" target="_blank" rel="external">Angular Material</a></strong>: the perfect fit, looked good, worked for the web, pure AngularJS and great documentation!</li>
</ul>
<h2 id="Playing_with_Angular_Material">Playing with Angular Material</h2><p>Whenever I’m exploring something new, I play around with it for a while - looking at demos and documentation - before taking the plunge and getting my hands dirty with it. It’s like dating the framework before making the committment :)</p>
<p>So, as always, I <a href="https://material.angularjs.org/#/demo/material.components.autocomplete" target="_blank" rel="external">played around with the demos</a> on the Angular Material site to get a feel of things.</p>
<p>The demos were cool - especially Grid List and Bottom Sheet! I especially liked that I could open up the source right there for each of the demos, or look at the source on CodePen. Looking through the source, it seemed like this would be easy to use, since there were powerful directives doing the work behind the scenes for the interaction and animations.</p>
<p>I then looked at the <a href="https://material.angularjs.org/#/layout/container" target="_blank" rel="external">section on layout</a>, to understand how layouting worked in Angular Material. This had been a source of grief for me with LumX, and I was pleased to see that the documentation and examples on Layout were much better for Angular Material.</p>
<p>I was sold by now, and it was time to get my hands dirty…</p>
<h2 id="Getting_my_hands_dirty">Getting my hands dirty</h2><p>I decided that I would improve on the code for the travel website I had done in the <a href="https://www.airpair.com/angularjs/posts/travel-app-in-2-hours" target="_blank" rel="external">last post</a>. First things first, I had to install Angular Material:<br><figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="char">$ </span>cd ~/<span class="class">Lab</span>/sabrelab/www</span><br><span class="line"><span class="char">$ </span>bower install angular-material</span><br></pre></td></tr></table></figure></p>
<p>This installed Angular Material, so I could get started coding. I also uninstalled LumX (bower uninstall lumx) which I had used previously in the same project. (<strong>Note</strong>: You don’t need to know about the earlier code to read the code coming up).</p>
<h3 id="The_requirements">The requirements</h3><p>I then thought through the structure of the code, and what I wanted:</p>
<ol>
<li>A toolbar on top</li>
<li>A origin city text field</li>
<li>A set of fields to capture the budget, and dates.</li>
<li>Errors displayed nicely</li>
<li>A list of results on success</li>
</ol>
<p>In addition, I was keen to:</p>
<ol>
<li>Use auto-fill &amp; search for the text field of cities</li>
<li>Try toast notifications for the errors</li>
<li>Have tooltips to describe what needed to be done</li>
</ol>
<h3 id="The_code">The code</h3><p>Given these requirements, this is how the <strong>index.html</strong> file came out:</p>
<p><strong>Boilerplate stuff to include the CSS</strong><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">title</span>&gt;</span>Get Lost<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">href</span>=<span class="value">"./bower_components/angular-material/angular-material.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span> <span class="attribute">ng-app</span>=<span class="value">"getLostApp"</span> <span class="attribute">ng-cloak</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">md-content</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p><strong>The toolbar on top</strong><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;!-- The top toolbar --&#62;&#10;&#60;md-toolbar&#62;&#10;  &#60;div class=&#34;md-toolbar-tools&#34;&#62;&#10;    &#60;md-button class=&#34;md-icon-button&#34; aria-label=&#34;Settings&#34;&#62;&#10;      &#60;md-icon md-svg-icon=&#34;./bower_components/material-design-icons/maps/svg/design/ic_local_airport_24px.svg&#34;&#62;&#60;/md-icon&#62;&#10;    &#60;/md-button&#62;&#10;    &#60;h2&#62;&#10;      &#60;span class=&#34;md-title&#34;&#62;Get Lost!&#60;/span&#62;&#10;    &#60;/h2&#62;&#10;  &#60;/div&#62;&#10;&#60;/md-toolbar&#62;</span><br></pre></td></tr></table></figure></p>
<p>This was interesting only in terms of including the Airport SVC icon on the top left. I found that Google has released a set of <a href="https://github.com/google/material-design-icons" target="_blank" rel="external">Material Design Icons</a> in SVG format. This can be easily installed from the command line using:<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ bower <span class="keyword">install</span> material-design-icons</span><br></pre></td></tr></table></figure></p>
<p>The only catch with this is that the installation is 57 MB of icons!</p>
<p>The next step was the <strong>Origin city text field, with autocomplete &amp; tooltip</strong>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;!-- The content area --&#62;&#10;    &#60;div layout=&#34;row&#34;&#62;&#10;      &#60;!-- 20% padding to the left --&#62;&#10;      &#60;div flex=&#34;20&#34;&#62;&#60;/div&#62;&#10;&#10;      &#60;!-- The main action happens here --&#62;&#10;      &#60;md-card flex ng-controller=&#34;MainCtrl as ctrl&#34;&#62;&#10;        &#60;md-card-content&#62;&#10;          &#60;!-- The row for the city select autocomplete list --&#62;&#10;          &#60;md-content&#62;&#10;          &#60;md-autocomplete  md-selected-item=&#34;ctrl.selectedItem&#34;&#10;            md-search-text=&#34;ctrl.searchText&#34;&#10;            md-items=&#34;item in ctrl.querySearch(ctrl.searchText)&#34;&#10;            md-item-text=&#34;item.display&#34;&#10;            md-min-length=&#34;0&#34;&#10;            placeholder=&#34;Where are you flying from?&#34;&#62;&#10;            &#60;md-item-template&#62;&#10;              &#60;span md-highlight-text=&#34;ctrl.searchText&#34; md-highlight-flags=&#34;^i&#34;&#62;&#123;&#123;item.display&#125;&#125;&#60;/span&#62;&#10;            &#60;/md-item-template&#62;&#10;            &#60;md-not-found&#62;&#10;              No matches found for &#34;&#123;&#123;ctrl.searchText&#125;&#125;&#34;.&#10;            &#60;/md-not-found&#62;&#10;          &#60;/md-autocomplete&#62;&#10;          &#60;md-tooltip&#62;&#10;              Pick the city you want to start from!&#10;          &#60;/md-tooltip&#62;&#10;          &#60;p class=&#34;md-caption&#34;&#62;NYC, CHI and LON work well&#60;/p&#62;</span><br></pre></td></tr></table></figure>
<p>This was a little complicated, and it requires corresponding code in the JavaScript app.js (further below), but with careful reading of the documentation &amp; code you should be able to figure it out.</p>
<p>The next was fields to <strong>pick up the budget &amp; the dates, and the submit button</strong>, the directive for date input is styled nicely:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;/md-content&#62;&#10;          &#60;!-- The row for the budget and dates --&#62;&#10;          &#60;div layout&#62;&#10;            &#60;md-input-container flex&#62;&#10;              &#60;md-select placeholder=&#34;Set your budget&#34; ng-model=&#34;info.maxfare&#34;&#62;&#10;                &#60;div ng-repeat=&#34;p in prices&#34;&#62;&#10;                  &#60;md-option value=&#34;&#123;&#123;p.value&#125;&#125;&#34;&#62;&#123;&#123;p.show&#125;&#125;&#60;/md-option&#62;&#10;                &#60;/div&#62;&#10;              &#60;/md-select&#62;&#10;            &#60;/md-input-container&#62;&#10;            &#60;md-input-container flex&#62;&#10;              &#60;label&#62;Start date&#60;/label&#62;&#10;              &#60;input type=&#34;date&#34; ng-model=&#34;info.departuredate&#34;&#62;&#10;            &#60;/md-input-container&#62;&#10;            &#60;md-input-container flex&#62;&#10;              &#60;label&#62;End date&#60;/label&#62;&#10;              &#60;input type=&#34;date&#34; ng-model=&#34;info.returndate&#34;&#62;&#10;            &#60;/md-input-container&#62;&#10;          &#60;/div&#62;&#10;&#10;          &#60;!-- The submit button --&#62;&#10;          &#60;div layout&#62;&#10;            &#60;md-button class=&#34;md-raised md-primary&#34; ng-click=&#34;submit()&#34;&#62;Search for destinations!&#60;/md-button&#62;&#10;          &#60;/div&#62;</span><br></pre></td></tr></table></figure></p>
<p>And then the last bit, <strong>displaying the results</strong>:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">  &#60;!-- The results --&#62;&#10;          &#60;md-content ng-show=&#34;fareinfo&#34;&#62;&#10;            &#60;md-list&#62;&#10;              &#60;md-subheader class=&#34;md-no-sticky&#34;&#62;Results&#60;/md-subheader&#62;&#10;              &#60;md-list-item class=&#34;md-3-line&#34; ng-repeat=&#34;item in fareinfo | orderBy:&#39;LowestFare&#39;&#34;&#62;&#10;                &#60;div class=&#34;md-list-item-text&#34;&#62;&#10;                  &#60;h3&#62;Destination: &#123;&#123; item.DestinationLocation &#125;&#125;&#60;/h3&#62;&#10;                  &#60;h4&#62;Lowest fare: $ &#123;&#123; item.LowestFare &#125;&#125;&#60;/h4&#62;&#10;                  &#60;p&#62;Lowest non-stop fare: $ &#123;&#123; item.LowestNonStopFare &#125;&#125;&#60;/p&#62;&#10;                &#60;/div&#62;&#10;                &#60;md-divider&#62;&#60;/md-divider&#62;&#10;              &#60;/md-list-item&#62;&#10;            &#60;/md-list&#62;&#10;          &#60;/md-content&#62;&#10;        &#60;/md-card-content&#62;&#10;      &#60;/md-card&#62;&#10;&#10;      &#60;!-- 20% padding to the right --&#62;&#10;      &#60;div flex=&#34;20&#34;&#62;&#60;/div&#62;&#10;    &#60;/div&#62;&#10;  &#60;/md-content&#62;&#10;  &#60;script src=&#34;./bower_components/angular/angular.js&#34;&#62;&#60;/script&#62;&#10;  &#60;script src=&#34;./bower_components/angular-aria/angular-aria.js&#34;&#62;&#60;/script&#62;&#10;  &#60;script src=&#34;./bower_components/angular-animate/angular-animate.js&#34;&#62;&#60;/script&#62;&#10;  &#60;script src=&#34;./bower_components/angular-material/angular-material.js&#34;&#62;&#60;/script&#62;&#10;&#10;  &#60;script src=&#34;./app.js&#34;&#62;&#60;/script&#62;&#10;&#60;/body&#62;&#10;&#10;&#60;/html&#62;</span><br></pre></td></tr></table></figure></p>
<p>The app.js JavaScript file is on <a href="https://raw.githubusercontent.com/arunr/sabrelab/master/www/app.js" target="_blank" rel="external">GitHub</a>, the key functions to look through are the ones for the auto-fill logic and for showing the toast message.</p>
<h2 id="How_does_it_look_when_done?">How does it look when done?</h2><p><strong>MUCH BETTER</strong> than the earlier version! It was actually working well and feeling like a professional designed service - just with a mornings work! This included toast messages, auto-filling data and other things that would have taken me hours!<br><img src="https://www.anony.ws/i/2015/05/15/airpair2462aa.png" alt="SabreLab"></p>
<p>You should try it out yourself on: <a href="http://52.10.111.167" target="_blank" rel="external">http://52.10.111.167</a>.</p>
<h2 id="Closing_thoughts">Closing thoughts</h2><p>I really, really liked <a href="https://material.angularjs.org" target="_blank" rel="external">Angular-Material</a>, it made me super productive in a day and I was able to whip out beautiful, professional, interactive UI!</p>
<p>My top 5 thoughts about Angular Material:</p>
<ul>
<li>Easy &amp; fast to get started</li>
<li>Great documentation</li>
<li>Works well across browsers (tried Chrome, FF and Safari)</li>
<li>Has most things I need to build UI</li>
<li>Only wish: it had a file-upload directive</li>
</ul>
<p>That’s it - hope you enjoyed the article, and look forward to your comments!<br><a href="http://twitter.com/appa" target="_blank" rel="external">@appa</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="https://www.anony.ws/i/2015/05/15/airpair2462aa.png" alt="img caption"></p>
<h2 id="The_back_story">The back story</h2><p>In my]]>
    </summary>
    
      <category term="Programming" scheme="http://appapappa.com/categories/Programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Travel app in 2 hours: Sabre, LumX, NodeJS and Angular]]></title>
    <link href="http://appapappa.com/2015/05/14/travel_app/"/>
    <id>http://appapappa.com/2015/05/14/travel_app/</id>
    <published>2015-05-14T10:51:04.000Z</published>
    <updated>2015-05-17T15:00:00.000Z</updated>
    <content type="html"><![CDATA[<h2 id="The_back_story">The back story</h2><p>I decided to build a travel web app this morning. I had been looking at the <a href="https://developer.sabre.com/" target="_blank" rel="external">Sabre Developer Studio</a> yesterday, and I wanted to get my hands dirty. I had also been looking at <a href="http://ui.lumapps.com/" target="_blank" rel="external">LumX</a> a few days ago, an AngularJS web frontend framework that implemented the <a href="http://www.google.com/design/spec/material-design/introduction.html" target="_blank" rel="external">Google Material Design</a> guidelines, and wanted to give it a spin.</p>
<p><strong>Follow along</strong> to see how I did it - all the way from coding to deployment on EC2, built using ExpressJS &amp; Angular.</p>
<h2 id="What_are_we_building?">What are we building?</h2><p>I’ve always wanted to build an app that allows me to pick where I am, set my dates and a budget - and it tells me where all I could go. Basically, a “I don’t care where I go this weekend - just get me out of here” app :) This is what I wanted to build in 2 hours: too ambitious? Perhaps not!</p>
<h2 id="What_you’ll_need_to_do_this">What you’ll need to do this</h2><p>There are a few things you’ll need to get this done in 2 hours - no cheating here, just basic stuff that I had on my machine already.</p>
<ul>
<li><strong>An editor</strong>: SublimeText, Brackets or my choice - <a href="https://atom.io/" target="_blank" rel="external">Atom</a>.</li>
<li><strong>An AWS account</strong>: I wont be covering setting up Amazon AWS. You could do this on Digital Ocean, Linode etc. too, so that will work as well.</li>
<li><strong>nodejs</strong>: This is fairly simple to install, so you can do that from <a href="https://nodejs.org/" target="_blank" rel="external">here</a></li>
<li><strong>git &amp; a GitHub account</strong>: This is to commit your code, and store it up on the web. Learn more at <a href="www.github.com">GitHub</a> if you don’t have this set up.</li>
</ul>
<h2 id="Getting_started:_8:00_am">Getting started: 8:00 am</h2><p>The first thing I did was sign-up for a <a href="https://developer.sabre.com/" target="_blank" rel="external">Sabre Developer Studio</a> account.</p>
<blockquote>
<p>Sabre is what is called a GDS (Global Distribution System). GDS’s aggregate flight, hotel, cruise, taxi and other inventory and provide an interface to travel agents (Expedia, Travelocity) to complete the bookings. Amadeus is the other large GDS, but they aren’t as developer friendly as Sabre from what I could see.</p>
</blockquote>
<p>Signing up for this was trivial - fill out a <a href="https://developer.sabre.com/member/register" target="_blank" rel="external">registration form</a>, validated your email address and then get your API key and password.</p>
<p>This took about 5 minutes to complete. After this, I spent some time looking at the REST API’s that Sabre exposes. I loved the documentation that Sabre has, and was pleasantly surprised by it, since I had the impression that integrating with something like a GDS would be a painful thing to do.</p>
<p>Specifically I spent some time looking at these two references:</p>
<ul>
<li><a href="https://developer.sabre.com/docs/read/rest_basics/endpoints_and_uris" target="_blank" rel="external">Endpoints &amp; URI’s</a> under the REST basics section</li>
<li><a href="https://developer.sabre.com/docs/read/REST_APIs" target="_blank" rel="external">REST API’s</a> which documents all the APIs that are exposed.</li>
</ul>
<p>FYI, Sabre also exposes much more functionality - like completing the booking, changing seats, cancellations etc. through a SOAP API, but I wasn’t feeling dirty enough to do SOAP!</p>
<p>While looking through these APIs, I identified two APIs that looked useful to me:</p>
<ol>
<li><strong>GET /v1/lists/supported/cities</strong>: This returns a list of cities which have airports in them.</li>
<li><strong>GET /v1/shop/flights/fares</strong>: This returns a list of flight fares given an origin, start &amp; end dates and a budget - just what I need!</li>
</ol>
<p>By now, it was about 8:20 am: 100 minutes left!</p>
<h2 id="Writing_some_code:_8:20_am">Writing some code: 8:20 am</h2><p>I decided to get my hands dirty with somde code. I found the Sabre had <a href="https://github.com/SabreDevStudio/sabre-dev-studio-node" target="_blank" rel="external">published</a> an npm module on GitHub that wraps their API’s - handy!</p>
<p>So, to get started I did this:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>cd ~<span class="regexp">/Lab/</span></span><br><span class="line"><span class="variable">$ </span>mkdir sabrelab</span><br><span class="line"><span class="variable">$ </span>cd sabrelab</span><br><span class="line"><span class="variable">$ </span>npm install sabre-dev-studio --save-dev</span><br></pre></td></tr></table></figure>
<p>Then I cranked up my code editor and wrote some sample code to test the API’s out, mostly the same stuff that was there on Sabre’s GitHub account:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> SabreDevStudio = <span class="built_in">require</span>(<span class="string">'sabre-dev-studio'</span>);</span><br><span class="line"><span class="keyword">var</span> sabre_dev_studio = <span class="keyword">new</span> SabreDevStudio(&#123;</span><br><span class="line">  client_id:     <span class="string">'&lt;your client id here&gt;'</span>,</span><br><span class="line">  client_secret: <span class="string">'&lt;your client secret here&gt;'</span>,</span><br><span class="line">  uri:           <span class="string">'https://api.test.sabre.com'</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> options = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> callback = <span class="function"><span class="keyword">function</span><span class="params">(error, data)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (error) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.stringify(<span class="built_in">JSON</span>.parse(data)));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">sabre_dev_studio.get(<span class="string">'/v1/lists/supported/cities'</span>, options, callback);</span><br><span class="line">sabre_dev_studio.get(<span class="string">'/v1/shop/flights/fares?origin=NYC&amp;departuredate=2015-05-25&amp;returndate=2015-05-30&amp;maxfare=200'</span>, options, callback);</span><br></pre></td></tr></table></figure>
<p>Running this was useful, as it gave me the idea of the output I’d get. For the <strong>/cities API call</strong>, the output was like this:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"Cities"</span>:[</span><br><span class="line">&#123;<span class="string">"code"</span>:<span class="string">"AUH"</span>,<span class="string">"name"</span>:<span class="string">"Abu Dhabi"</span>,<span class="string">"countryCode"</span>:<span class="string">"AE"</span>,<span class="string">"countryName"</span>:<span class="string">"United Arab Emirates"</span>,<span class="string">"regionName"</span>:<span class="string">"Middle East"</span>,<span class="string">"Links"</span>:[&#123;<span class="string">"rel"</span>:<span class="string">"airportsInCity"</span>,<span class="string">"href"</span>:<span class="string">"https://api.test.sabre.com/v1/lists/supported/cities/AUH/airports"</span>&#125;]&#125;,</span><br><span class="line">&#123;<span class="string">"code"</span>:<span class="string">"ALY"</span>,<span class="string">"name"</span>:<span class="string">"Alexandria"</span>,<span class="string">"countryCode"</span>:<span class="string">"EG"</span>,<span class="string">"countryName"</span>:<span class="string">"Egypt"</span>,<span class="string">"regionName"</span>:<span class="string">"Middle East"</span>,<span class="string">"Links"</span>:[&#123;<span class="string">"rel"</span>:<span class="string">"airportsInCity"</span>,<span class="string">"href"</span>:<span class="string">"https://api.test.sabre.com/v1/lists/supported/cities/ALY/airports"</span>&#125;]&#125;]&#125;</span><br></pre></td></tr></table></figure></p>
<p>For the <strong>/fares API call</strong>, the output was like this:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="string">"OriginLocation"</span>:<span class="string">"NYC"</span>,<span class="string">"FareInfo"</span>:[&#123;<span class="string">"CurrencyCode"</span>:<span class="string">"USD"</span>,<span class="string">"LowestNonStopFare"</span>:<span class="number">136.2</span>,<span class="string">"LowestFare"</span>:<span class="number">136.2</span>,<span class="string">"DestinationLocation"</span>:<span class="string">"BUF"</span>,<span class="string">"DepartureDateTime"</span>:<span class="string">"2015-05-25T00:00:00"</span>,<span class="string">"ReturnDateTime"</span>:<span class="string">"2015-05-30T00:00:00"</span>,<span class="string">"Links"</span>:[&#123;<span class="string">"rel"</span>:<span class="string">"shop"</span>,<span class="string">"href"</span>:<span class="string">"https://api.test.sabre.com/v1/shop/flights?origin=NYC&amp;destination=BUF&amp;departuredate=2015-05-25&amp;returndate=2015-05-30&amp;pointofsalecountry=US"</span>&#125;]&#125;]&#125;</span><br></pre></td></tr></table></figure></p>
<p>Brilliant - so, I could now get a list of the airport codes &amp; city names to show as starting cities &amp; I could also get the list of fares &amp; destinations back… the rest of this was going to be a piece of cake!</p>
<p>Time now: 8:40 am, 80 minutes to go…</p>
<h2 id="Coding_up_the_nodejs_/_Express_server:_8:40_am">Coding up the nodejs / Express server: 8:40 am</h2><p>I spent some time wondering if I should use <a href="http://browserify.org/" target="_blank" rel="external">Browserify</a> on the Sabre npm module, and use it that way. But then I didn’t know enough about Browserify, so I said, what the heck, lets just hack up a server real quick.</p>
<p>First, I created the directory structure, fairly simple, and touched a couple of files, package.json and app.js:<br><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-<span class="ruby"> sabrelab</span><br><span class="line"></span>-<span class="ruby">-- config</span><br><span class="line"></span>-<span class="ruby">-- www</span><br><span class="line"></span>-<span class="ruby">-- package.json</span><br><span class="line"></span>-<span class="ruby">-- app.js</span></span><br></pre></td></tr></table></figure></p>
<p>Inside package.json, I put in some standard stuff that I use in every project, and also included sabre-dev-studio. My package.json looked like this:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#10;  &#34;dependencies&#34;: &#123;&#10;    &#34;body-parser&#34;: &#34;latest&#34;,&#10;    &#34;compression&#34;: &#34;latest&#34;,&#10;    &#34;cookie-parser&#34;: &#34;latest&#34;,&#10;    &#34;dateformat&#34;: &#34;~1.0.7-1.2.3&#34;,&#10;    &#34;errorhandler&#34;: &#34;latest&#34;,&#10;    &#34;express&#34;: &#34;latest&#34;,&#10;    &#34;express-session&#34;: &#34;latest&#34;,&#10;    &#34;http-post&#34;: &#34;~0.1.1&#34;,&#10;    &#34;memory-cache&#34;: &#34;0.0.5&#34;,&#10;    &#34;method-override&#34;: &#34;latest&#34;,&#10;    &#34;morgan&#34;: &#34;latest&#34;,&#10;    &#34;mstring&#34;: &#34;^0.1.2&#34;,&#10;    &#34;multer&#34;: &#34;^0.1.0&#34;,&#10;    &#34;serve-favicon&#34;: &#34;latest&#34;,&#10;    &#34;string&#34;: &#34;~1.8.0&#34;,&#10;    &#34;underscore&#34;: &#34;latest&#34;,&#10;    &#34;validator&#34;: &#34;^3.19.1&#34;,&#10;    &#34;sabre-dev-studio&#34;: &#34;^1.0.1&#34;&#10;  &#125;,&#10;  &#34;name&#34;: &#34;sabrelab&#34;,&#10;  &#34;subdomain&#34;: &#34;sabrelab&#34;,&#10;  &#34;scripts&#34;: &#123;&#10;    &#34;start&#34;: &#34;node app.js&#34;&#10;  &#125;,&#10;  &#34;version&#34;: &#34;0.0.1&#34;,&#10;  &#34;engines&#34;: &#123;&#10;    &#34;node&#34;: &#34;0.8.x&#34;&#10;  &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>I wasn’t sure I needed everything there, but then, <em>I was working against time</em>…</p>
<p>Next, I whipped out app.js, mostly using what I’d used on a previous project:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(function () &#123;&#10;  &#39;use strict&#39;;&#10;  var express = require(&#39;express&#39;);&#10;  var app = express();&#10;&#10;  require(&#39;./config/config_app&#39;)(app);&#10;  require(&#39;./config/config_routes&#39;)(app);&#10;&#10;  // START THE SERVER&#10;  console.log(&#39;STARTING THE SABRE SERVER&#39;);&#10;  console.log(&#39;-------------------------&#39;);&#10;  app.listen(3000);&#10;  console.log(&#39;Started the server&#39;);&#10;  process.on(&#39;uncaughtException&#39;, function (error) &#123;&#10;      console.log(error.stack);&#10;      console.log(error);&#10;  &#125;);&#10;&#10;&#125;)();</span><br></pre></td></tr></table></figure>
<p>Now, to the config_app.js in the config directory, again, mostly boilerplate stuff from a different project:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;use strict&#39;;&#10;var express = require(&#39;express&#39;),&#10;    bodyParser = require(&#39;body-parser&#39;),&#10;    methodOverride = require(&#39;method-override&#39;),&#10;    morgan = require(&#39;morgan&#39;),&#10;    cookieParser = require(&#39;cookie-parser&#39;),&#10;    compression = require(&#39;compression&#39;),&#10;    errorhandler = require(&#39;errorhandler&#39;),&#10;    multer  = require(&#39;multer&#39;);&#10;&#10;module.exports = function(app) &#123;&#10;  app.use(compression());&#10;  app.use(morgan(&#39;dev&#39;));&#10;  app.use(bodyParser());&#10;  app.use(multer());&#10;  app.use(cookieParser(&#39;sabreSessions&#39;));&#10;&#10;  app.use(methodOverride());&#10;&#10;  app.use(express.static(__dirname + &#39;/../www/&#39;));&#10;  app.all(&#34;/api/*&#34;, function(req, res, next) &#123;&#10;      res.header(&#34;Access-Control-Allow-Origin&#34;, &#34;*&#34;);&#10;      res.header(&#34;Access-Control-Allow-Headers&#34;, &#34;Cache-Control, Pragma, Origin, Authorization, Content-Type, X-Requested-With, Accept&#34;);&#10;      res.header(&#34;Access-Control-Allow-Methods&#34;, &#34;GET, PUT, POST, HEAD, DELETE, OPTIONS&#34;);&#10;      return next();&#10;  &#125;);&#10;&#10;  app.use(errorhandler(&#123;&#10;      dumpExceptions: true,&#10;      showStack: true&#10;  &#125;));&#10;&#10;&#125;;</span><br></pre></td></tr></table></figure>
<p>Now that I had the skeleton of a working server, I had to put in the routes, which is what I did next in config_routes.js. This was all new work, so it required some time and thinking:</p>
<p>This code came first - to initialise the Sabre Dev Studio &amp; authorize against it using the API key:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#39;use strict&#39;;&#10;var SabreDevStudio = require(&#39;sabre-dev-studio&#39;);&#10;var sabreDevStudio = new SabreDevStudio(&#123;&#10;  client_id:     &#39;&#60;your client_id&#62;&#39;,&#10;  client_secret: &#39;&#60;your client_secret&#62;&#39;,&#10;  uri:           &#39;https://api.test.sabre.com&#39;&#10;&#125;);&#10;var options = &#123;&#125;;</span><br></pre></td></tr></table></figure>
<p>This code came next, two small helper functions: the first one (sabreCall) to make a GET call against Sabre, and the next one (response) to send back the response to the HTTP client with either the data returned, or the error:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">function sabreCall(q, res) &#123;&#10;  sabreDevStudio.get(q, options, function(err, data) &#123;&#10;    response(res, err, data);&#10;  &#125;);&#10;&#125;&#10;&#10;function response(res, err, data) &#123;&#10;  if (err) &#123;&#10;    res.status(200).send(&#123;&#10;      &#39;status&#39;: false,&#10;      &#39;message&#39;: &#39;Error&#39;,&#10;      &#39;info&#39;: err&#10;    &#125;);&#10;  &#125; else &#123;&#10;    res.status(200).send(&#123;&#10;      &#39;status&#39;: true,&#10;      &#39;message&#39;: &#39;Success&#39;,&#10;      &#39;info&#39;: data&#10;    &#125;);&#10;  &#125;&#10;&#125;</span><br></pre></td></tr></table></figure>
<p>All this work meant that setting up the API’s was going to be trivial - just calling our sabreCall function with the API’s we need:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module.exports = function(app) &#123;&#10;&#10;  app.get(&#39;/api/v1/cities&#39;, function(req,res) &#123;&#10;    sabreCall(&#39;/v1/lists/supported/cities&#39;, res);&#10;  &#125;);&#10;&#10;  app.get(&#39;/api/v1/places&#39;, function(req,res) &#123;&#10;    sabreCall(&#39;/v1/shop/flights/fares?origin=&#39; + req.query.origin +&#10;    &#39;&#38;departuredate=&#39; + req.query.departuredate +&#10;    &#39;&#38;returndate=&#39; + req.query.returndate +&#10;    &#39;&#38;maxfare=&#39; + req.query.maxfare, res);&#10;  &#125;);&#10;&#125;;</span><br></pre></td></tr></table></figure>
<p><strong>That was it</strong> - I started up the server (below), and tried hitting the API’s from Chrome by navigating to <a href="http://localhost:3000/api/v1/cities" target="_blank" rel="external">http://localhost:3000/api/v1/cities</a>, and got back the expected response!<br><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>node app.js</span><br></pre></td></tr></table></figure></p>
<p>Now all that was left was to write the front-end! I looked at my watch, and saw that I’d spent half an hour on the server, so I had 50 minutes left.</p>
<h2 id="Creating_the_front-end_with_LumX_and_AngularJS:_9:10_am">Creating the front-end with LumX and AngularJS: 9:10 am</h2><p>I had seen <a href="http://ui.lumapps.com/" target="_blank" rel="external">LumX</a> a few days ago, and was intrigued by it. I wanted to try out the Google Material Design and see how it felt. At the same time, I wasn’t sure I could make it in the time I had left.</p>
<p>Should I use <a href="http://getbootstrap.com/" target="_blank" rel="external">Bootstrap</a> instead? I had used it before, which was a good thing. But then, what the heck, you live only once :) LumX it was going to be.</p>
<p>The first nice thing about LumX was that it was really easy to install, and it also installed everything else I needed. I navigated into the www directory, and got started:</p>
<figure class="highlight smalltalk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="char">$ </span>cd ~/<span class="class">Lab</span>/sabrelab/www</span><br><span class="line"><span class="char">$ </span>bower install lumx</span><br></pre></td></tr></table></figure>
<p>This installed LumX. Also, on the <strong>LumX site</strong>(<a href="http://ui.lumapps.com/getting-started/installation" target="_blank" rel="external">http://ui.lumapps.com/getting-started/installation</a>), they have a great getting started that asked me to add this to my index.html. So, I started up a www/index.html file, and put this into it:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;!DOCTYPE html&#62;&#10;&#60;html lang=&#34;en&#34;&#62;&#10;&#10;&#60;head&#62;&#10;  &#60;meta charset=&#34;UTF-8&#34;&#62;&#10;  &#60;title&#62;Get Lost&#60;/title&#62;&#10;  &#60;link rel=&#34;stylesheet&#34; href=&#34;bower_components/lumx/dist/lumx.css&#34;&#62;&#10;  &#60;link rel=&#34;stylesheet&#34; href=&#34;bower_components/mdi/materialdesignicons.css&#34;&#62;&#10;  &#60;link rel=&#34;stylesheet&#34; href=&#34;http://fonts.googleapis.com/css?family=Roboto:300,400,500,700&#34;&#62;&#10;&#60;/head&#62;&#10;&#10;&#60;body ng-app=&#34;getLostApp&#34;&#62;&#10;&#10;  &#60;script src=&#34;bower_components/jquery/dist/jquery.js&#34;&#62;&#60;/script&#62;&#10;  &#60;script src=&#34;bower_components/velocity/velocity.js&#34;&#62;&#60;/script&#62;&#10;  &#60;script src=&#34;bower_components/moment/min/moment-with-locales.js&#34;&#62;&#60;/script&#62;&#10;  &#60;script src=&#34;bower_components/angular/angular.js&#34;&#62;&#60;/script&#62;&#10;  &#60;script src=&#34;bower_components/lumx/dist/lumx.js&#34;&#62;&#60;/script&#62;&#10;  &#60;script src=&#34;./app.js&#34;&#62;&#60;/script&#62;&#10;&#60;/body&#62;&#10;&#60;/html&#62;</span><br></pre></td></tr></table></figure>
<p>I then created an app.js file (referenced on the last line of the HTML file):<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">angular.module(&#39;getLostApp&#39;, [&#39;lumx&#39;]).&#10;controller(&#39;MainCtrl&#39;, function($rootScope, $scope, $http) &#123;&#10;&#10;  // Get the cities data that I can show in the drop-down&#10;  $http.get(&#39;/api/v1/cities&#39;).success(function(data) &#123;&#10;    $scope.cities = (JSON.parse(data.info)).Cities;&#10;    console.log($scope.cities);&#10;  &#125;).error(function(err) &#123;&#10;    $scope.error = err;&#10;  &#125;);&#10;&#10;  // Set some prices that I can show in the prices drop-down&#10;  $scope.prices = [&#10;    &#123;show:&#39;$200&#39;, value:200&#125;,&#10;    &#123;show:&#39;$300&#39;, value:300&#125;,&#10;    &#123;show:&#39;$400&#39;, value:400&#125;,&#10;    &#123;show: &#39;$500&#39;, value:500&#125;&#10;  ];&#10;&#10;  // Initialize this with what to show when the page is loaded&#10;  $scope.info = &#123;&#10;    origin: &#123;&#10;      name: &#39;New York City&#39;,&#10;      code: &#39;NYC&#39;&#10;    &#125;,&#10;    maxfare: &#123;&#10;      show: &#39;$500&#39;,&#10;      value: 500&#10;    &#125;,&#10;    returndate: &#39;2015-05-20&#39;,&#10;    departuredate: &#39;2015-05-15&#39;&#10;  &#125;;&#10;&#10;  // Call the server to get the fares info&#10;  $scope.submit = function() &#123;&#10;    $http.get(&#39;/api/v1/places?origin=&#39; + $scope.info.origin.code +&#10;      &#39;&#38;departuredate=&#39; + formatDate($scope.info.departuredate) +&#10;      &#39;&#38;returndate=&#39; + formatDate($scope.info.returndate) +&#10;      &#39;&#38;maxfare=&#39; + $scope.info.maxfare.value).success(function(data) &#123;&#10;        $scope.results = data;&#10;        $scope.data = data.info;&#10;        if ($scope.results.status) &#123;&#10;          $scope.fareinfo = JSON.parse($scope.data).FareInfo;&#10;        &#125; else &#123;&#10;          $scope.error = JSON.parse($scope.data.data).message;&#10;        &#125;&#10;    &#125;).error(function(err) &#123;&#10;      $scope.error = JSON.parse(err.data).message;&#10;    &#125;);&#10;  &#125;;&#10;&#10;  // Helper function from stackoverflow so that I can format the date before sending to the server&#10;  function formatDate(date) &#123;&#10;    var d = new Date(date),&#10;      month = &#39;&#39; + (d.getMonth() + 1),&#10;      day = &#39;&#39; + d.getDate(),&#10;      year = d.getFullYear();&#10;&#10;    if (month.length &#60; 2) &#123;&#10;      month = &#39;0&#39; + month;&#10;    &#125;&#10;    if (day.length &#60; 2) &#123;&#10;      day = &#39;0&#39; + day;&#10;    &#125;&#10;&#10;    return [year, month, day].join(&#39;-&#39;);&#10;  &#125;&#10;&#125;);</span><br></pre></td></tr></table></figure></p>
<p>Now, I all I had to do was the UI using LumX, and then hook it up with some simple AngularJS to call my functions. But this is where I got stuck: I’m not great at building the front-end UI, and the LumX documentation wasn’t great, especially on how to use the FlexBox (maybe I dont know enough about FlexBox?).</p>
<p>Anyway, not much time to think - it’s time to code up this UI! What did I want, let me think about this:</p>
<ol>
<li>A heading</li>
<li>A row with two colums: on to select the start city, and the other to put in my budget.</li>
<li>A row with a start and end date</li>
<li>A submit button</li>
<li>A place to show the results - error or success</li>
</ol>
<p>Taking it one at a time, this is how the UI built up: first the heading:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;div class=&#34;p+&#34;&#62;&#10;  &#60;span class=&#34;fs-display-3 display-block&#34;&#62;Get Lost&#60;/span&#62;&#10;  &#60;span class=&#34;fs-title display-block&#34;&#62;goofing around with @appa&#60;/span&#62;&#10;&#60;/div&#62;</span><br></pre></td></tr></table></figure>
<p>Then, the reference to the MainCtrl and the row…<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;div ng-controller=&#34;MainCtrl&#34;&#62;&#10;  &#60;div class=&#34;mt++&#34; flex-container=&#34;row&#34; flex-gutter=&#34;24&#34;&#62;</span><br></pre></td></tr></table></figure></p>
<p>Next, the first column - this one would ask the user to pick a city…</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;div flex-item&#62;&#10;  &#60;lx-select ng-model=&#34;info.origin&#34; placeholder=&#34;Starting airport&#34; choices=&#34;cities&#34; floating-label&#62;&#10;    &#60;lx-select-selected&#62;&#10;      &#123;&#123; $selected.name &#125;&#125; - &#123;&#123; $selected.code &#125;&#125;&#10;    &#60;/lx-select-selected&#62;&#10;&#10;    &#60;lx-select-choices&#62;&#10;      &#123;&#123; $choice.name &#125;&#125; - &#123;&#123; $choice.code &#125;&#125;&#10;    &#60;/lx-select-choices&#62;&#10;  &#60;/lx-select&#62;&#10;&#60;/div&#62;</span><br></pre></td></tr></table></figure>
<p>And, the next column, and end the row:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;div flex-item&#62;&#10;  &#60;lx-select ng-model=&#34;info.maxfare&#34; placeholder=&#34;Budget&#34; choices=&#34;prices&#34; floating-label&#62;&#10;    &#60;lx-select-selected&#62;&#10;      &#123;&#123; $selected.show &#125;&#125;&#10;    &#60;/lx-select-selected&#62;&#10;&#10;    &#60;lx-select-choices&#62;&#10;      &#123;&#123; $choice.show &#125;&#125;&#10;    &#60;/lx-select-choices&#62;&#10;  &#60;/lx-select&#62;&#10;&#60;/div&#62;&#10;&#60;/div&#62;</span><br></pre></td></tr></table></figure></p>
<p>Now, for the next row with the two columns with date pickers:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;div class=&#34;mt++&#34; flex-container=&#34;row&#34; flex-gutter=&#34;24&#34;&#62;&#10;  &#60;div flex-item&#62;&#10;    &#60;form&#62;&#10;      &#60;lx-date-picker model=&#34;info.departuredate&#34; label=&#34;Start date&#34; locale=&#34;en&#34; fixed-label=&#34;true&#34; icon=&#34;calendar&#34;&#62;&#60;/lx-date-picker&#62;&#10;    &#60;/form&#62;&#10;  &#60;/div&#62;&#10;&#10;  &#60;div flex-item&#62;&#10;    &#60;form&#62;&#10;      &#60;lx-date-picker model=&#34;info.returndate&#34; label=&#34;End date&#34; locale=&#34;en&#34; fixed-label=&#34;true&#34; icon=&#34;calendar&#34;&#62;&#60;/lx-date-picker&#62;&#10;    &#60;/form&#62;&#10;  &#60;/div&#62;&#10;&#60;/div&#62;</span><br></pre></td></tr></table></figure></p>
<p>Then, a row with the submit button:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;div class=&#34;mt++&#34; flex-container=&#34;row&#34; flex-gutter=&#34;24&#34;&#62;&#10;  &#60;div flex-item&#62;&#10;    &#60;div flex-container=&#34;column&#34; flex-align=&#34;space-between center&#34;&#62;&#10;      &#60;button class=&#34;btn btn--m btn--blue btn--raised&#34; lx-ripple ng-click=&#34;submit()&#34;&#62;Submit&#60;/button&#62;&#10;    &#60;/div&#62;&#10;  &#60;/div&#62;&#10;&#60;/div&#62;</span><br></pre></td></tr></table></figure></p>
<p>Now, for the row that handles the response…<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#60;div class=&#34;mt++&#34; flex-container=&#34;row&#34; flex-gutter=&#34;24&#34; flex-wrap ng-show=&#34;results&#34;&#62;&#10;  &#60;div ng-show=&#34;results.status&#34; class=&#34;p++&#34;&#62;&#10;    &#60;div flex-item=&#34;6&#34;&#62;&#10;      &#60;span class=&#34;fs-title display-block mb&#34;&#62;Places you can go...&#60;/span&#62;&#10;        &#60;div class=&#34;divider divider--dark&#34;&#62;&#60;/div&#62;&#10;          &#60;ul class=&#34;list mt++&#34;&#62;&#10;            &#60;div ng-repeat=&#34;d in fareinfo | orderBy: &#39;LowestFare&#39;&#34;&#62;&#10;              &#60;li class=&#34;list-row list-row--has-separator&#34;&#62;&#10;                &#60;div class=&#34;list-row__content&#34;&#62;&#10;                  &#60;span&#62;&#123;&#123;d.LowestFare&#125;&#125;, &#123;&#123;d.DestinationLocation&#125;&#125;&#60;/span&#62;&#10;                &#60;/div&#62;&#10;              &#60;/li&#62;&#10;            &#60;/div&#62;&#10;          &#60;/ul&#62;&#10;        &#60;/div&#62;&#10;      &#60;/div&#62;&#10;&#10;      &#60;div ng-hide=&#34;results.status&#34; class=&#34;p++&#34;&#62;&#10;        &#60;h2&#62;Error&#60;/h2&#62;&#10;          &#123;&#123;error&#125;&#125;&#10;       &#60;/div&#62;&#10;    &#60;/div&#62;</span><br></pre></td></tr></table></figure></p>
<p>By now, I was running out of time - I had a working app. Everything was working, but I wasn’t pleased yet, because:</p>
<ul>
<li>The UI didn’t look great. LumX had worked out well for the date picker &amp; the drop-down list, but I couldn’t get the hang of how to space things around.</li>
<li>The results, when returned, didn’t have the full information - it had only the airport code &amp; the price, not the full airport name etc. It also didn’t look very good :(</li>
</ul>
<p>Here’s how it was looking by now:</p>
<p><img src="https://www.anony.ws/i/2015/05/12/getlost.png" alt="ABC"></p>
<p>Anyway, on to the next step - deploying to AWS. 20 minutes to go!!</p>
<h2 id="GitHub,_and_deploying_to_AWS:_9:40_am">GitHub, and deploying to AWS: 9:40 am</h2><p>The next 20 minutes went by in a rush… first of all, I committed to git, and uploaded to GitHub:</p>
<figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$ </span>cd ~<span class="regexp">/Lab/sabrelab</span></span><br><span class="line"><span class="variable">$ </span>git init .</span><br><span class="line"><span class="variable">$ </span>git add .</span><br><span class="line"><span class="variable">$ </span>git commit -am <span class="string">"Initial commit for Sabre Lab"</span></span><br></pre></td></tr></table></figure>
<p>Then I went to GitHub and created a new repo at <a href="https://github.com/arunr/sabrelab" target="_blank" rel="external">https://github.com/arunr/sabrelab</a>. I went back to the command line and pushed my code up to GitHub, so I could later easily get to it from AWS:</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git remote <span class="built_in">add</span> origin http<span class="variable">s:</span>//github.<span class="keyword">com</span>/arunr/sabrelab.git</span><br><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure>
<p>I then went over to AWS, and created a micro-instance of Ubuntu. After downloading the PEM file, I logged in to the instance, and installed node, git and forever (so that I could keep my server running):</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -i sabrelab.pem ubuntu@&lt;your server IP here&gt;</span><br><span class="line"></span><br><span class="line">Then <span class="command"><span class="keyword">on</span> <span class="title">the</span> <span class="title">Ubuntu</span> <span class="title">AWS</span> <span class="title">instance</span>:</span></span><br><span class="line"></span><br><span class="line">$ curl -<span class="variable">sL</span> <span class="keyword">https</span>://deb.nodesource.com/setup | sudo bash -</span><br><span class="line">$ sudo apt-<span class="built_in">get</span> install -y nodejs</span><br><span class="line">$ sudo apt-<span class="built_in">get</span> install git</span><br><span class="line">$ git clone <span class="keyword">https</span>://github.com/arunr/sabrelab.git</span><br><span class="line">$ sudo npm install -g <span class="keyword">forever</span></span><br><span class="line">$ cd ~/sabrelab</span><br><span class="line">$ sudo <span class="keyword">forever</span> <span class="built_in">start</span> app.js</span><br></pre></td></tr></table></figure>
<p>After this, I had to do two things, which I had forgotten:</p>
<ol>
<li>Change the port in app.js from 3000 to 80.</li>
<li>Add my EC2 instance to a security group that allowed for inbound access to the server on HTTP port 80.</li>
</ol>
<p>Once I had done this, I had my public facing server: at <a href="http://52.10.111.167" target="_blank" rel="external">http://52.10.111.167</a>.</p>
<p>I looked at my watch, and it was 9:57 am… I had made it with just enough time to give me server an spin!</p>
<h2 id="Closing_thoughts">Closing thoughts</h2><p>A few thoughts to close out - just my own learnings from the morning:</p>
<ul>
<li>I proved to myself that it is possible to create a web app from end-to-end in 2 hours (this was important for me, because I haven’t had any <em>code flow</em> for a while now!)</li>
<li>More importantly, I managed to dabble with a few new things and see how they fit - Sabre Developer API’s and LumX.</li>
<li>On the Sabre Developer APIs - I found this easy to start, well documented, useful and something I might use in a project in the future. The only catch was that this is all against the Sabre Test API’s and I couldn’t find any documentation on the pricing of the PROD API’s.</li>
<li>On LumX - I found the UI beautiful in the examples, but couldn’t find enough documentation to make my own front-end UI look good in the half-hour I spent with it. So, I’m not dissing it, but it definitely felt hard - maybe I just need to put in more time into it.</li>
<li>Next steps:<ul>
<li>Clean up the UI and make it look pretty</li>
<li>Show more full results, with a link to booking as well</li>
<li>Connect to the Sabre PROD API’s</li>
<li>Use geo-location to auto-fill the start city</li>
<li>Wrap the entire thing in Ionic so there is a phone app version of this</li>
</ul>
</li>
</ul>
<p>That’s it - hope you had fun, and look forward to your comments!<br><a href="http://twitter.com/appa" target="_blank" rel="external">@appa</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="The_back_story">The back story</h2><p>I decided to build a travel web app this morning. I had been looking at the <a href="https://d]]>
    </summary>
    
      <category term="Programming" scheme="http://appapappa.com/categories/Programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Yakity Yak]]></title>
    <link href="http://appapappa.com/2015/02/06/yakity-yak/"/>
    <id>http://appapappa.com/2015/02/06/yakity-yak/</id>
    <published>2015-02-06T03:33:49.000Z</published>
    <updated>2015-05-18T03:34:44.000Z</updated>
    <content type="html"><![CDATA[<p>Let me hold you tight<br>Through the night<br>My trembling child<br>From your dark and wild<br>dreams.</p>
<p>You looked so sad<br>That I wish I had<br>The power to steal<br>Your thoughts, to feel<br>your pain.</p>
<p>I wish you’d smile<br>It’s been a while<br>Since I gazed<br>On that radiant face<br>of yours.</p>
<p>What ails you now<br>I don’t know and how<br>I pray you’ll be<br>Without misery<br>or grief.</p>
<p>I want you back<br>Just yakity-yak<br>You and me<br>So happy and free<br>like before.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Let me hold you tight<br>Through the night<br>My trembling child<br>From your dark and wild<br>dreams.</p>
<p>You looked so sad<br>That I]]>
    </summary>
    
      <category term="Poetry" scheme="http://appapappa.com/categories/Poetry/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[The Stubborn Mule]]></title>
    <link href="http://appapappa.com/2015/01/29/the-stubborn-mule/"/>
    <id>http://appapappa.com/2015/01/29/the-stubborn-mule/</id>
    <published>2015-01-29T03:05:53.000Z</published>
    <updated>2015-05-18T03:07:48.000Z</updated>
    <content type="html"><![CDATA[<h2 id="For_Arty_Types,_or_“The_stubborn_mule”">For Arty Types, or “The stubborn mule”</h2><p>I brought in father to our school -<br>He who lived by book and rule.<br>“This isn’t a school” is what he said<br>“How will they earn their daily bread?<br>By painting pots? By singing song?<br>This isn’t right - most certainly wrong!”<br>He saw some more, and heaved a sigh,<br>“We’re so well to do, please then tell why<br>My granddaughter runs about with holes<br>In her shoes and pants and camisoles!<br>Sand in her hair, mud on her face<br>Where are the teachers? Who runs this place?”<br>Then all at once, a child ran up to dad<br>And said “You look angry, don’t be so sad”<br>“Just smile!” he said, and ran away<br>Done giving his gift, he went back to play.<br>Dad looked surprised, he smiled at last<br>A little wistfully, lost in the past<br>The lilt of music reached his ears<br>A familiar raaga, it brought out the tears<br>He wiped his eyes, got back his will<br>“Though it may be nice, I think it still<br>Is not an education, just play and fun<br>Just for arty types - not for everyone!”<br>I introduced dad to a close friend<br>Who held him tight, for minutes on end!<br>At last dad got away from his bear hug<br>He smiled a wan smile, he gave a shrug.<br>“If you’re sure it’s fine, it’s OK I guess<br>I can’t dictate anymore, only pray and bless<br>Just tutor her well, teach her arithmetic<br>And English, both writing and phonetic<br>Some Shakespeare - just the important plays<br>And maybe some Chinese - it’s such a craze these days!”<br>Just then a facilitator came up to dad<br>Embraced him warmly, and said “We’re so glad<br>that you could visit us in our space -<br>Look at your child - so much joy and grace -<br>She’s really a blessing - you must stay for lunch!”<br>Dad protested feebly, but I had a hunch<br>That he wanted to stay and sample the fare<br>Whose fragrant smells wafted through the air!<br>He ate slowly, enjoying the meal,<br>Chewing meditatively, taking in the feel<br>Of the calming space, the mellow sun<br>That cast rays of gold on everyone.<br>The screech of parrots in the tree above,<br>The caring adults, in whose silent love<br>The children played without a care<br>No fear, no hate - just purity there.<br>Lunch done, he silently washed his plate<br>With his granddaughter, seventy-five and eight<br>Together soaping and rinsing a spoon<br>When he suddenly realized that all too soon<br>She’d be all grown up, and he wouldn’t be there<br>To wash spoons with her, to talk, to share<br>So he paused, and took in that entire breath<br>And knew that in her, he was safe from death<br>For even when he was dead and gone,<br>He lived in her - and so, on and on.<br>We drove back home in silence then<br>Mom opened the door, and later when<br>She asked my dad “So, how was school?”<br>“For arty types” said the stubborn mule.</p>
<p>© 2015 Microsoft Terms Privacy &amp; cookies Developers English (United States)</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="For_Arty_Types,_or_“The_stubborn_mule”">For Arty Types, or “The stubborn mule”</h2><p>I brought in father to our school -<br>He who ]]>
    </summary>
    
      <category term="Poetry" scheme="http://appapappa.com/categories/Poetry/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Marjorie Gluten]]></title>
    <link href="http://appapappa.com/2015/01/22/marjorie-gluten/"/>
    <id>http://appapappa.com/2015/01/22/marjorie-gluten/</id>
    <published>2015-01-22T02:57:10.000Z</published>
    <updated>2015-05-18T03:00:12.000Z</updated>
    <content type="html"><![CDATA[<p>Marjorie Gluten lived on carbs<br>Through school and college suffered barbs<br>About her girth, about her weight<br>Which brought her down, so she ate and ate.</p>
<p>She ate more rice, she ate more wheat<br>And lots of cake and lots of sweet.<br>The more she ate, the more she grew<br>And behind her back she was “Fatty Glu”.</p>
<p>The barbs just kept coming fast and thick<br>Till one day Marj felt very strange and sick,<br>She moped all day, just lay in bed<br>And didn’t eat a thing, not even bread.</p>
<p>She sobbed a bit, then she wiped her tears<br>When she saw she ate just for her fears<br>She cried some more, she wailed “Boohoo,<br>All these years of eating, and I ate for you!”</p>
<p>From today I’ll look inside, see how I feel<br>Before I eat another morsel or meal.<br>From that day on Marj ate more slow<br>She chewed her food and tasted it more,</p>
<p>She felt the texture, she smelt the smells<br>And as she experimented, or so she tells<br>That she realised that eating with sense<br>Made every bite taste more intense.</p>
<p>With her senses all open now when she ate<br>She found she didn’t care for chocolate<br>That too much rice made her sleepy<br>And too much sugar made her weepy!</p>
<p>So she started to eat only what made her feel good<br>And she realised with surprise - it was healthy food!<br>She started to enjoy her portions small<br>And soon her weight began to fall.</p>
<p>And after years of eating all the while<br>For the first time Marj found time for a smile<br>She felt so fit, she felt so fine<br>That she treated herself to a sip of wine.</p>
<p>And as Marjorie Gluten lost more weight<br>For the first time on prom she had a date<br>She smiled and laughed and danced the night away<br>And finally she said “People, I have something to say:</p>
<p>All these years of teasing me about my weight<br>Just made me eat more and caused me to hate<br>Till finally I stopped, and what did I see?<br>That the person I needed love from was me.</p>
<p>It was more than enough to make me feel great,<br>And it was finally what made me watch what I ate.<br>It wasn’t your kind words, it wasn’t any of you -<br>You didn’t see Marj, you only saw Fatty Glu.</p>
<p>And if you cant be kind, then you shouldn’t dance<br>All these years I was lonely, you didn’t give me a chance.<br>So all you starving uglies, stuff you and your prom<br>I’ve found myself, you stay where you’re from!”</p>
<p>With that Marj stopped, she dumped her date<br>She went back home, where she sat and ate<br>Some bread and honey, a slice of cheese<br>She felt warm and full, happy as you please.</p>
<p>And that’s the story of Marjorie Glu<br>She found herself, have you found you?</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Marjorie Gluten lived on carbs<br>Through school and college suffered barbs<br>About her girth, about her weight<br>Which brought her dow]]>
    </summary>
    
      <category term="Poetry" scheme="http://appapappa.com/categories/Poetry/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mr Whiny]]></title>
    <link href="http://appapappa.com/2015/01/17/mr-whiny/"/>
    <id>http://appapappa.com/2015/01/17/mr-whiny/</id>
    <published>2015-01-17T03:00:33.000Z</published>
    <updated>2015-05-18T03:06:02.000Z</updated>
    <content type="html"><![CDATA[<p>Written by Arun, and illustrated by Nika: <a href="mr_whiny.pdf">Mr Whiny</a></p>
<h2 id="Mr_Whiny">Mr Whiny</h2><p>Mr. Whiny in your bed,<br>Mr. Whiny in your head.<br>Mr. Whiny says “No, no!”,<br>Mr. Whiny says “Don’t go!”.<br>“Dont go and see the sun that’s shining<br>Just stay in bed and keep on whining.”</p>
<p>Mr. Whiny doesn’t smile<br>Mr. Whiny says “In a while”.<br>Mr. Whiny always delays,<br>Mr. Whiny never plays.<br>Always the clouds, not the silver lining<br>Just stays alone, and keeps on whining.</p>
<p>Mr. Whiny is always down,<br>Mr. Whiny is in your town<br>Mr. Whiny comes down your street<br>Mr. Whiny is coming to eat!<br>He’s sulky and grumpy and isn’t dining,<br>No carrots or peas, just constant whining!</p>
<p>Mr. Whiny in your mind,<br>Mr. Whiny isn’t kind.<br>Mr. Whiny goes “Boo hoo”<br>But Mr. Whiny isn’t you!<br>So, dont stay in bed and keep on whining,<br>Go and play and see the sun that’s shining!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Written by Arun, and illustrated by Nika: <a href="mr_whiny.pdf">Mr Whiny</a></p>
<h2 id="Mr_Whiny">Mr Whiny</h2><p>Mr. Whiny in your bed]]>
    </summary>
    
      <category term="Poetry" scheme="http://appapappa.com/categories/Poetry/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[12 languages in 12 months:]]></title>
    <link href="http://appapappa.com/2015/01/02/archive/12-languages-in-12-months/"/>
    <id>http://appapappa.com/2015/01/02/archive/12-languages-in-12-months/</id>
    <published>2015-01-01T22:02:31.000Z</published>
    <updated>2015-05-17T14:44:29.000Z</updated>
    <content type="html"><![CDATA[<p>There is a flood of new programming languages, with many new and interesting emerging languages in the last year.</p>
<p>After looking at a long list of these programming languages, here’s my short-list of 12 languages to learn in the next 12 months:</p>
<p>1. January: Rust</p>
<p>2. February: Go</p>
<p>3. March: Nim</p>
<p>4. April: Julia</p>
<p>5. May: Swift</p>
<p>6. June: D</p>
<p>7. July: EcmaScript 6</p>
<p>8. August: Idris</p>
<p>9. September: Elixir</p>
<p>10. October: R (not new, but new enough!)</p>
<p>11. November: Fantom</p>
<p>12. December: Ceylon</p>
<p>There were other languages considered, here’s the also rans:</p>
<p>1. F#</p>
<p>2. Haskell</p>
<p>3. Elm</p>
<p>4. Jai</p>
<p>5. Polymer</p>
<p>6. Snap</p>
<p>7. J language</p>
<p>8. Om</p>
<p>9. Hack</p>
<p>10. Opa</p>
<p>11. Erlang</p>
<p>12. Scala</p>
<p>13. Clojure</p>
<p>14. Zimbu</p>
<p>15. Haxe</p>
<p>16. Dart</p>
<p>17. X10</p>
<p>18. Cray Chapel</p>
<p>Note: These are all interesting languages to learn, however, some of them are too experimental, some are more frameworks than languages and some have been around for a while (so, not really new!).</p>
<p>Over the next year, I’m going to attempt to do a daily write-up about my own experience in learning these languages…</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>There is a flood of new programming languages, with many new and interesting emerging languages in the last year.</p>
<p>After looking at]]>
    </summary>
    
      <category term="Programming" scheme="http://appapappa.com/categories/Programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Be a technologist!]]></title>
    <link href="http://appapappa.com/2014/10/15/archive/be-a-technologist/"/>
    <id>http://appapappa.com/2014/10/15/archive/be-a-technologist/</id>
    <published>2014-10-15T16:25:57.000Z</published>
    <updated>2015-05-17T14:50:01.000Z</updated>
    <content type="html"><![CDATA[<p>There is this simple 2x2 model I have. On one axis is Talk - Do. The other axis is Optimist - Pessimist. The 4 quadrants are Talk/Pessimist (activists), Talk/Optimist (politicians), Do/Pessimist (anarchists) and Do/Optimist (technologists). On any topic that draws debate - climate change, poverty, fundamentalism etc. - you have a choice to make. The right choice is to choose to be a technologist :)</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>There is this simple 2x2 model I have. On one axis is Talk - Do. The other axis is Optimist - Pessimist. The 4 quadrants are Talk/Pessimi]]>
    </summary>
    
      <category term="Product Management" scheme="http://appapappa.com/categories/Product-Management/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[How to use Cordova network plugin in AngularJS]]></title>
    <link href="http://appapappa.com/2014/09/17/archive/how-to-use-cordova-network-plugin-in-angularjs/"/>
    <id>http://appapappa.com/2014/09/17/archive/how-to-use-cordova-network-plugin-in-angularjs/</id>
    <published>2014-09-17T10:15:33.000Z</published>
    <updated>2015-05-17T17:35:07.000Z</updated>
    <content type="html"><![CDATA[<script src="//gist.github.com/90a94883a7218c55065a.js"></script>
]]></content>
    <summary type="html">
    <![CDATA[<script src="//gist.github.com/90a94883a7218c55065a.js"></script>
]]>
    </summary>
    
      <category term="Programming" scheme="http://appapappa.com/categories/Programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[AngularJS / modules]]></title>
    <link href="http://appapappa.com/2014/09/17/archive/angularjs-modules/"/>
    <id>http://appapappa.com/2014/09/17/archive/angularjs-modules/</id>
    <published>2014-09-17T05:29:59.000Z</published>
    <updated>2015-05-17T14:46:05.000Z</updated>
    <content type="html"><![CDATA[<p>[gist id=’d580a15166a7275cea68’ width=”100%”]</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>[gist id=’d580a15166a7275cea68’ width=”100%”]</p>
]]>
    </summary>
    
      <category term="Programming" scheme="http://appapappa.com/categories/Programming/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Writing (once) more]]></title>
    <link href="http://appapappa.com/2014/07/23/archive/writing-once-more/"/>
    <id>http://appapappa.com/2014/07/23/archive/writing-once-more/</id>
    <published>2014-07-23T16:10:56.000Z</published>
    <updated>2015-05-17T15:01:04.000Z</updated>
    <content type="html"><![CDATA[<p>I’m starting to write once more after a hiatus - and I want to write more! I’ve been writing a journal off and on using Day One (which I highly recommend if you use a Mac). However, I plan to get back to blogging on my domain too - motivated by the hosting expiry reminder! Well, here’s to being back!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I’m starting to write once more after a hiatus - and I want to write more! I’ve been writing a journal off and on using Day One (which I ]]>
    </summary>
    
      <category term="Journal" scheme="http://appapappa.com/categories/Journal/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Meditation]]></title>
    <link href="http://appapappa.com/2013/10/13/archive/meditation/"/>
    <id>http://appapappa.com/2013/10/13/archive/meditation/</id>
    <published>2013-10-13T00:54:36.000Z</published>
    <updated>2015-05-17T14:55:06.000Z</updated>
    <content type="html"><![CDATA[<p>I sit in solitude, breathing<br>In-out, in-out, eyes closed.<br>My mind is calm, <del>still</del><br>The silence new and disqueiting<br>A contrast to the turmoil within.</p>
<p>When did you last really taste water?<br>Cool and fresh, a balm to parched throats.<br>When did you last really breath air?</p>
<p>I sit in solitude, breathing<br>In-out, in-out, eyes closed.<br>My body is one, a machine,<br>The rhythm of my breath<br>A reminder that I am alive.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I sit in solitude, breathing<br>In-out, in-out, eyes closed.<br>My mind is calm, <del>still</del><br>The silence new and disqueiting<br>A]]>
    </summary>
    
      <category term="Poetry" scheme="http://appapappa.com/categories/Poetry/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Use your product daily]]></title>
    <link href="http://appapappa.com/2013/10/08/archive/use-your-product-daily/"/>
    <id>http://appapappa.com/2013/10/08/archive/use-your-product-daily/</id>
    <published>2013-10-07T20:48:52.000Z</published>
    <updated>2015-05-17T12:59:19.000Z</updated>
    <content type="html"><![CDATA[<p><div><a href="http://stripgenerator.com/strip/769834/use-your-product/" target="_blank" rel="external"><img src="http://s3.amazonaws.com/stripgenerator/strip/43/89/67/00/00/full.png" alt=""></a><br><a href="http://stripgenerator.com/strip/769834/use-your-product/" target="_blank" rel="external">Use your product</a> by <a href="http://appapappa.stripgenerator.com/" title="appa" target="_blank" rel="external">appa</a></div><br><a id="more"></a>It seems  an obvious thing to say – but if you’re building products, then you really should be using your product daily.</p>
<p>“Well, we’ve done usability testing and customers really like all the functionality!”, you say.</p>
<p>“But what about you, do you like the functionality, do you use your product daily?”, I ask.</p>
<p>I hope that your answer isn’t ”Huh, me? Why, I don’t use the product, I just build it!!”</p>
<p>Use your product. Daily. Be relentless &amp; creative in finding ways to put your product into real world usage scenarios at your workplace. This can be hard, especially if you are in a company building domain specific products, but don’t back off – put yourself through one hour of using your product daily.</p>
<p>I’ve heard excuses of how you get used to the current version of the product &amp; won’t have fresh and creative new ideas! Well, as one of my product management gurus used to say: “You need to do to things really well: the first is to remember, and the second is to forget!”</p>
<p>Use your product daily – usability testing, talking to customers and looking at market trends all have their place, but none of these gives the bang for the buck of actually using your product for an hour each day. There is nothing that will help you better realize the pain you are inflicting on people or the joy that you are providing than the practice of using your product daily. Here are my top 5 reasons on why using your product daily is good for your health &amp; happiness!</p>
<ul>
<li><blockquote>
<p><strong>Being the star of the party:</strong> Even before checking email, use your product for an hour. Getting into this practice allows you to build a sense of purpose about what you do for a living. Using your product daily will help you be the star at parties. When people ask you “So what do you do for a living?”, you won’t be tongue tied and say something stupid like “Uh, I just manage people!”. Your crisp articulation &amp; passion for what you do will shine through and will get you shaking your booty on the dance floor with people you didn’t know just a few minutes ago!</p>
</blockquote>
</li>
<li><blockquote>
<p><strong>Getting developer love</strong>: Using your product allows to know your product deeply. There is nothing that your developers like more than a product manager who really understands the intricacies of the product. Using your product daily is the magic potion to get developer love, which is the single most important thing you need to push in those wonderful features the week before shipping!</p>
</blockquote>
</li>
<li><blockquote>
<p><strong>Traveling business class to Vegas:</strong> If you know your product inside-out, well, there is then no one else who can evangelize it as well. If no one on your team can evangelize your product better then you, then d’oh, it’s going to be you who is traveling business class to those conferences in Vegas along with the marketing team (who happen to be on an unlimited budget!). Know your product deeply, &amp; evangelize it openly – this is your free ticket to Vegas!</p>
</blockquote>
</li>
<li><blockquote>
<p><strong>Shipping the highest quality product</strong>: Using your product allows you to file great bugs. There is nothing that your testers hate more than a program manager who files great bugs and sets the bar for them! There will be hushed mutterings and mumblings about how “Even the program manager is filing great bugs now. We need to do a better job!!”. Filing great bugs will allow you to get your test team to exhort themselves even harder, which is the single best thing you can do to ensure that you are shipping a great quality product.</p>
</blockquote>
</li>
<li><blockquote>
<p><strong>Being the visionary leader!</strong> Who doesn’t like to be a leader? And a visionary one, at that?! Well, it turns out that it isn’t about standing up and preaching to the masses, and the reality is more sober – it’s all about hard work. Well, that was one wet blanket! However, if you do want really want to build the right thing for customers &amp; influence what goes into the next version of the product – well, using your product will give you the most deep knowledge in being able to do this. Use your product daily, and become that visionary leader!<br><a href="http://act2.me/daily-product-management/" target="_blank" rel="external">Daily Product Management</a></p>
</blockquote>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><div><a href="http://stripgenerator.com/strip/769834/use-your-product/"><img src="http://s3.amazonaws.com/stripgenerator/strip/43/89/67/00/00/full.png" alt=""></a><br><a href="http://stripgenerator.com/strip/769834/use-your-product/">Use your product</a> by <a href="http://appapappa.stripgenerator.com/" title="appa">appa</a></div><br>]]>
    
    </summary>
    
      <category term="Product Management" scheme="http://appapappa.com/categories/Product-Management/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Do code reviews]]></title>
    <link href="http://appapappa.com/2013/09/20/archive/do-code-reviews/"/>
    <id>http://appapappa.com/2013/09/20/archive/do-code-reviews/</id>
    <published>2013-09-19T23:40:42.000Z</published>
    <updated>2015-05-17T14:48:56.000Z</updated>
    <content type="html"><![CDATA[<div><a href="http://stripgenerator.com/strip/765919/do-code-reviews/" target="_blank" rel="external"><img src="http://s3.amazonaws.com/stripgenerator/strip/91/95/67/00/00/full.png" alt=""></a><br><a href="http://stripgenerator.com/strip/765919/do-code-reviews/" target="_blank" rel="external">Do code reviews</a> by <a href="http://appapappa.stripgenerator.com/" title="appa" target="_blank" rel="external">appa<a id="more"></a></a></div><br><div></div><br><div>There are many reasons, as a product manager, to do code reviews. Now, before we get into those reasons, let me first squelch a few protests:</div><br><div><br><br>OK, so now that we have that out of the way, what are the reasons to do code reviews? Here are five reasons - I’m sure there are more!<br><br></div><br><div><br><br>So, whether you’re a journeyman seeking mastery, or a master seeking beginners mind - use the source, Luke - and do code reviews!<br><br></div><br><div></div><br><div><a href="http://act2.me/daily-product-management/" target="_blank" rel="external">Daily Product Management</a></div>
]]></content>
    <summary type="html">
    <![CDATA[<div><a href="http://stripgenerator.com/strip/765919/do-code-reviews/"><img src="http://s3.amazonaws.com/stripgenerator/strip/91/95/67/00/00/full.png" alt=""></a><br><a href="http://stripgenerator.com/strip/765919/do-code-reviews/">Do code reviews</a> by <a href="http://appapappa.stripgenerator.com/" title="appa">appa]]>
    
    </summary>
    
      <category term="Product Management" scheme="http://appapappa.com/categories/Product-Management/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Teach kids programming - A collection of resources]]></title>
    <link href="http://appapappa.com/2013/09/15/archive/teach-kids-programming-a-collection-of-resources/"/>
    <id>http://appapappa.com/2013/09/15/archive/teach-kids-programming-a-collection-of-resources/</id>
    <published>2013-09-14T20:01:07.000Z</published>
    <updated>2015-05-17T14:58:16.000Z</updated>
    <content type="html"><![CDATA[<p>(Cross posted from my post on <a href="https://medium.com/p/a2dc04ea9529" target="_blank" rel="external">Medium</a>)</p>
<p>I’ve been gathering the best resources to teach children &amp; teens programming — books, environments, apps, courseware and games.</p>
<p>These resources are meant for teachers and parents who want to have their children fall in love with computers and see the magic of programming.</p>
<p>I’m staying away from philosophical debates of whether kids should learn to program, when they should start and other such topics. I know this — I fell in love with computers in 3rd grade (a beautiful <a href="https://www.google.co.in/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;ved=0CC0QFjAA&amp;url=http%3A%2F%2Fen.wikipedia.org%2Fwiki%2FZX_Spectrum&amp;ei=Dz40UoMgg9itB7OJgeAN&amp;usg=AFQjCNGW255Nfvl7-Eo2QRYp3CG8dBm2cA&amp;sig2=ns2IThtsuPuz8uWMHK2RFA&amp;bvm=bv.52164340,d.bmk" target="_blank" rel="external">ZX Spectrum</a>), and I want to share the joy of programming with others.</p>
<p>I’ve chosen in this list to be quite comprehensive in listing all resources — but also choosy to restricting this to things I found useful &amp; of high quality.</p>
<p>I’ve also started this list with my own opinionated picks on what kind of material from the large list of resources may be suitable for children with different interests and at different points in their learning.</p>
<p>Sharing this broadly, do let me know what else I can add to this list.</p>
<h2 id="The_Opinionated_Picks">The Opinionated Picks</h2><ul>
<li><strong>For children aged 5 — 8: </strong><a href="http://twolivesleft.com/CargoBot/" target="_blank" rel="external">Cargo-Bot</a>, <a href="https://itunes.apple.com/in/app/hopscotch-coding-for-kids/id617098629?mt=8" target="_blank" rel="external">Hopscotch</a>, <a href="http://turtleacademy.com/" target="_blank" rel="external">TurleAcademy</a>.</li>
<li><strong>For children aged 9 — 12</strong>: <a href="http://jasonrbriggs.com/python-for-kids/" target="_blank" rel="external">Python for Kids</a>, <a href="https://itunes.apple.com/in/app/hakitzu-elite-robot-hackers/id599976903?mt=8" target="_blank" rel="external">Hakitzu</a>, <a href="http://codeandconquer.co/#start" target="_blank" rel="external">Code and Conquer</a>, <a href="http://mindstorms.lego.com/en-us/default.aspx" target="_blank" rel="external">Lego Mindstorms</a>, <a href="http://www.raspberrypi.org/about" target="_blank" rel="external">RaspberryPi</a> &amp; <a href="http://hackety.com/" target="_blank" rel="external">HacketyHack</a>,</li>
<li><strong>For children aged 12 and above</strong>: <a href="http://scratch.mit.edu/" target="_blank" rel="external">MIT Scratch</a>, <a href="http://www.amazon.co.uk/Super-Scratch-Programming-Adventure-Program/dp/1593274092/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1369195924&amp;sr=1-2&amp;keywords=learn+to+program" target="_blank" rel="external">Super Scratch Programming</a>, <a href="http://www.amazon.com/Code-Language-Computer-Hardware-Software/dp/0735611319/ref=sr_1_1?ie=UTF8&amp;qid=1379151706&amp;sr=8-1&amp;keywords=CODe" target="_blank" rel="external">CODE</a>, <a href="http://www.amazon.com/exec/obidos/ASIN/0395938473/metafilter-20/ref=nosim/" target="_blank" rel="external">The New Way Things Work</a>, <a href="http://www.amazon.com/exec/obidos/ASIN/0062730975/metafilter-20/ref=nosim/" target="_blank" rel="external">The Cartoon Guide to the Computer</a></li>
<li><strong>For children interested in robotics</strong>: <a href="http://www.amazon.co.uk/Tinkertoy-Computer-Other-Machinations/dp/071672491X/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1369195952&amp;sr=1-1&amp;keywords=the+tinkertoy+computer" target="_blank" rel="external">The Tinkertoy Computer</a>, <a href="http://www.wizards.com/default.asp?x=ah/prod/roborally" target="_blank" rel="external">Roborally — Wizards of the Coasts</a>, <a href="http://www.kickstarter.com/projects/arcbotics/sparki-the-easy-robot-for-everyone?ref=live" target="_blank" rel="external">Sparki the Robot</a></li>
<li><strong>For children interested in games: </strong><a href="http://landoflisp.com/" target="_blank" rel="external">Land of Lisp</a>, <a href="http://www.kodugamelab.com/" target="_blank" rel="external">Kodu</a> (on the XBox) &amp; <a href="http://www.processing.org/" target="_blank" rel="external">Processing</a></li>
<li><strong>For beginning adults</strong>: <a href="http://www.amazon.com/Code-Language-Computer-Hardware-Software/dp/0735611319/ref=sr_1_1?ie=UTF8&amp;qid=1379151706&amp;sr=8-1&amp;keywords=CODe" target="_blank" rel="external">CODE</a>, <a href="http://www.amazon.co.uk/Learn-Program-Using-Ruby-Facets/dp/1934356360/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1369195924&amp;sr=1-1&amp;keywords=learn+to+program" target="_blank" rel="external">Learn to Program using Ruby</a></li>
</ul>
<h2 id="The_Large_List_of_Resources">The Large List of Resources</h2><h3 id="Books_about_Computing">Books about Computing</h3><ul>
<li><a href="http://www.amazon.com/Code-Language-Computer-Hardware-Software/dp/0735611319/ref=sr_1_1?ie=UTF8&amp;qid=1379151706&amp;sr=8-1&amp;keywords=CODe" target="_blank" rel="external">CODE</a> — Charles Petzold</li>
<li><a href="http://www.amazon.co.uk/Lauren-Ipsum-Carlos-Bueno/dp/1461178185/ref=pd_sim_b_2" target="_blank" rel="external">Lauren Ipsum</a> — Carlos Beuon</li>
<li><a href="http://www.amazon.com/exec/obidos/ASIN/0395938473/metafilter-20/ref=nosim/" target="_blank" rel="external">The New Way Things Work </a>— David Macaulay</li>
<li><a href="http://www.amazon.com/exec/obidos/ASIN/0062730975/metafilter-20/ref=nosim/" target="_blank" rel="external">The Cartoon Guide to the Computer</a> — Larry Gonick</li>
<li><a href="http://www.amazon.co.uk/Computational-Fairy-Tales-Jeremy-Kubica/dp/1477550291/ref=pd_vtp_b_3" target="_blank" rel="external">Computational Fairytales</a> — Jeremy Kubica</li>
<li><a href="http://www.amazon.co.uk/Practices-Spell-Design-Jeremy-Kubica/dp/1481921916/ref=pd_vtp_b_3" target="_blank" rel="external">Best Practices of Spell Design </a>— Jeremy Kubica</li>
<li><a href="http://www.amazon.com/Hello-World-Computer-Programming-Beginners/dp/1933988495" target="_blank" rel="external">Hello, World</a> — Warren Sande</li>
</ul>
<h3 id="Advanced_Books_on_Computing">Advanced Books on Computing</h3><ul>
<li><a href="http://www.amazon.com/The-Elements-Computing-Systems-Principles/dp/0262640686/ref=pd_sim_b_1" target="_blank" rel="external">The Elements of Computing Systems </a>— Noam &amp; Shimon</li>
<li><a href="http://www.amazon.co.uk/Tinkertoy-Computer-Other-Machinations/dp/071672491X/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1369195952&amp;sr=1-1&amp;keywords=the+tinkertoy+computer" target="_blank" rel="external">The Tinkertoy Computer</a> — A K Dewdney</li>
<li><a href="http://www.amazon.com/exec/obidos/ASIN/1593271042/metafilter-20/ref=nosim/" target="_blank" rel="external">Inside the Machine</a> — Jon Stokes</li>
</ul>
<h3 id="Books_on_Programming_for_Children">Books on Programming for Children</h3><ul>
<li><a href="http://www.amazon.co.uk/Learn-Program-Using-Ruby-Facets/dp/1934356360/ref=sr_1_1?s=books&amp;ie=UTF8&amp;qid=1369195924&amp;sr=1-1&amp;keywords=learn+to+program" target="_blank" rel="external">Learn to Program using Ruby</a> — Chris Pine</li>
<li><a href="http://www.amazon.co.uk/Super-Scratch-Programming-Adventure-Program/dp/1593274092/ref=sr_1_2?s=books&amp;ie=UTF8&amp;qid=1369195924&amp;sr=1-2&amp;keywords=learn+to+program" target="_blank" rel="external">Super Scratch Programming</a> — The LEAD Project</li>
<li><a href="http://jasonrbriggs.com/python-for-kids/" target="_blank" rel="external">Python for Kids</a> — Jason Briggs</li>
<li><p><a href="http://landoflisp.com/" target="_blank" rel="external">Land of Lisp</a> —Conrad Barski</p>
<blockquote>
<p><strong>Offbeat pick: </strong><a href="http://nostarch.com/mg_databases.htm" target="_blank" rel="external"><strong>Manga Guide to Databases</strong></a><br><strong>Environments for Programming</strong></p>
</blockquote>
</li>
<li><p><a href="http://hackety.com/" target="_blank" rel="external">HacketyHack</a></p>
</li>
<li><a href="http://scratch.mit.edu/" target="_blank" rel="external">MIT Scratch</a></li>
<li><a href="http://www.kodugamelab.com/" target="_blank" rel="external">Kodu</a> (on the XBox)</li>
<li><a href="http://www.tynker.com/" target="_blank" rel="external">Tynker</a></li>
<li><a href="http://smallbasic.com/" target="_blank" rel="external">Microsoft SmallBasic</a></li>
<li><a href="http://gvr.sourceforge.net/about.php" target="_blank" rel="external">Guido Van Robot</a></li>
<li><a href="http://www.squeak.org/" target="_blank" rel="external">Squeak</a><blockquote>
<p><strong>Advanced pick</strong>: <a href="http://www.processing.org/" target="_blank" rel="external">Processing</a></p>
</blockquote>
</li>
</ul>
<h3 id="iPad_or_Android_apps_—_Great_to_learn_programming">iPad or Android apps — Great to learn programming</h3><ul>
<li><a href="https://itunes.apple.com/in/app/hakitzu-elite-robot-hackers/id599976903?mt=8" target="_blank" rel="external">Hakitzu</a></li>
<li><a href="https://itunes.apple.com/in/app/hopscotch-coding-for-kids/id617098629?mt=8" target="_blank" rel="external">Hopscotch</a></li>
<li><a href="http://twolivesleft.com/CargoBot/" target="_blank" rel="external">Cargo-Bot</a></li>
<li><a href="http://twolivesleft.com/Codea/" target="_blank" rel="external">Codea</a></li>
<li><a href="http://www.algoid.net/" target="_blank" rel="external">Algoid</a></li>
<li><a href="https://itunes.apple.com/in/app/daisy-the-dinosaur/id490514278?mt=8" target="_blank" rel="external">Daisy the Dino</a></li>
<li><a href="https://itunes.apple.com/us/app/kodable/id577673067?mt=8" target="_blank" rel="external">Kodable Pro</a></li>
</ul>
<h3 id="Robotics">Robotics</h3><ul>
<li><a href="http://mindstorms.lego.com/en-us/default.aspx" target="_blank" rel="external">Lego Mindstorms</a></li>
<li><a href="http://www.kickstarter.com/projects/arcbotics/sparki-the-easy-robot-for-everyone?ref=live" target="_blank" rel="external">Sparki the Robot</a></li>
<li><a href="http://www.wizards.com/default.asp?x=ah/prod/roborally" target="_blank" rel="external">Roborally — Wizards of the Coasts</a></li>
<li><a href="http://www.raspberrypi.org/about" target="_blank" rel="external">RaspberryPi</a> &amp; <a href="http://www.arduino.cc/" target="_blank" rel="external">Arduino</a></li>
<li><a href="http://www.robomind.net/en/index.html" target="_blank" rel="external">RoboMind</a></li>
</ul>
<h3 id="MOOC_/_Courseware">MOOC / Courseware</h3><ul>
<li><a href="http://pluralsight.com/training/Courses/TableOfContents/teaching-kids-programming" target="_blank" rel="external">Teaching Programming to Kids — Pluralsight</a></li>
<li><a href="http://www.khanacademy.org/cs" target="_blank" rel="external">Khan Academy CS</a></li>
<li><a href="http://msdn.microsoft.com/en-us/beginner/bb308754.aspx" target="_blank" rel="external">Microsoft Beginner Resource Center</a></li>
<li><a href="http://www.codehs.com/" target="_blank" rel="external">CodeHS</a>, <a href="http://www.codecademy.com/" target="_blank" rel="external">Codecademy</a>, <a href="https://www.coursera.org/" target="_blank" rel="external">Coursera</a>, <a href="https://www.udacity.com/" target="_blank" rel="external">Udacity</a> &amp; <a href="https://www.edx.org/" target="_blank" rel="external">EdX</a></li>
</ul>
<h3 id="Other_games_&amp;_tools">Other games &amp; tools</h3><ul>
<li><a href="http://turtleacademy.com/" target="_blank" rel="external">TurtleAcademy</a></li>
<li><a href="https://www.cs.mtsu.edu/%7Euntch/karel/links.html" target="_blank" rel="external">Karel the Robot</a><blockquote>
<p><strong>Pick of the games</strong>: <a href="http://codeandconquer.co/#start" target="_blank" rel="external">Code and Conquer</a></p>
</blockquote>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>(Cross posted from my post on <a href="https://medium.com/p/a2dc04ea9529" target="_blank" rel="external">Medium</a>)</p>
<p>I’ve been gat]]>
    </summary>
    
      <category term="Tech" scheme="http://appapappa.com/categories/Tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MeteorMaker]]></title>
    <link href="http://appapappa.com/2013/09/14/archive/meteormaker/"/>
    <id>http://appapappa.com/2013/09/14/archive/meteormaker/</id>
    <published>2013-09-14T04:00:19.000Z</published>
    <updated>2015-05-17T14:55:18.000Z</updated>
    <content type="html"><![CDATA[<p>The best way to learn a new technology is to actually build something in it - however small. After reading the “<a href="http://www.discovermeteor.com/" target="_blank" rel="external">Discover Meteor</a>“ book (my <a href="http://act2.me/book-review-discover-meteor/" target="_blank" rel="external">review</a>), I decided to build an app using <a href="meteor.com">Meteor</a>. So, here’s announcing… ta-da:</p>
<h2 id="MeteorMaker:_www-meteormaker-com">MeteorMaker: <a href="http://www.meteormaker.com" target="_blank" rel="external">www.meteormaker.com</a></h2><p>(here’s the source on <a href="https://github.com/arunr/MeteorMaker" target="_blank" rel="external">GitHub</a>)</p>
<p>This is a site where you can:</p>
<p>The system is right now really basic, which reflects my understanding of Meteor - but it’s on <a href="https://github.com/arunr/MeteorMaker" target="_blank" rel="external">GitHub</a>, so help me improve it by forking the source and adding to it. Features I’d like to add are, and am in the process of adding (when I get the time!) are:</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>The best way to learn a new technology is to actually build something in it - however small. After reading the “<a href="http://www.disco]]>
    </summary>
    
      <category term="Tech" scheme="http://appapappa.com/categories/Tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Re-inventing Microsoft]]></title>
    <link href="http://appapappa.com/2013/09/11/archive/re-inventing-microsoft/"/>
    <id>http://appapappa.com/2013/09/11/archive/re-inventing-microsoft/</id>
    <published>2013-09-11T09:22:07.000Z</published>
    <updated>2015-05-17T14:57:06.000Z</updated>
    <content type="html"><![CDATA[<div><br><br><a href="http://act2.me/wp-content/uploads/2013/09/logo.png" target="_blank" rel="external"><img src="http://act2.me/wp-content/uploads/2013/09/logo.png" alt="logo"></a><br><br><header></header>There has been a lot written about Microsoft in the last two months. A <a href="http://www.microsoft.com/en-us/news/Press/2013/Jul13/07-11OneMicrosoft.aspx" target="_blank" rel="external">large re-org</a>, <a href="http://www.microsoft.com/en-us/news/press/2013/aug13/08-23StatementPR.aspx" target="_blank" rel="external">the retirement of SteveB</a>, and <a href="http://www.microsoft.com/en-us/news/press/2013/sep13/09-02AnnouncementPR.aspx" target="_blank" rel="external">Microsoft’s purchase of Nokia</a> have been the events that have focused a debate on Microsoft’s future.<br><br>The commentary has been unanimously unflattering, though it has varied in its level of vitriol. The writers, like interns debating whether a patient is terminal, dead or a Zombie, have only disagreed on Microsoft’s level of decline, not on the final outcome. Two lines of argument that come up often in the discussion about the reasons for Microsoft’s decline are:<br>&gt; <em>   <strong>Share of connected devices: </strong>Microsoft’s <a href="http://ben-evans.com/benedictevans/2013/7/20/the-irrelevance-of-microsoft" target="_blank" rel="external">share of connected devices</a> has tanked. This is because PC sales are falling, and because Microsoft missed the mobile boat (and hence, “Let’s buy Nokia”). This is the reason for Microsoft’s decline.<br>&gt; </em>   <strong>Consumer mind-share: </strong>The four S’s — start-ups, small businesses, students and your significant others — don’t (willingly) use Microsoft products. With consumer-led, or bottoms-up, IT decision making becoming increasingly common, Microsoft will soon lose enterprises too. This is the reason for Microsoft’s decline.<br>In this essay, I argue that both of these are symptoms, and not causes for the decline. I also argue that Microsoft can re-invent itself, and that with one last gasp, it may still regain the crown that it once wore.<br><br>—<br><br>Look at Microsoft’s four big competitors: Amazon, Apple, Facebook and Google. Now, quick, which one of these sells software for money?<br><br>The answer — none of them — lies at the root of the problems that Microsoft faces: Microsoft’s DNA is that of a company that sells packaged software for a buck to users and businesses.<br><br>In my mind, there are three trends from the last decade that Microsoft ignored or missed, and its competitors capitalized on and (re-)invented themselves around: <strong>free</strong>, <strong>farms</strong> and <strong>small</strong>. Let us look at each of these in turn:<br><br><strong>Free — or, non software sale business models</strong><br><br>In a fantastic essay last year, Mark Andreessen pointed out <a href="http://online.wsj.com/article/SB10001424053111903480904576512250915629460.html" target="_blank" rel="external">that software is eating the world</a>, and that every business is a software business.<br><br>In many ways, Microsoft has the opposite problem: since every business is a software business, Microsoft is being attacked by companies that aren’t in the job of “selling software for money”. They are, as we examine in the next point, being attacked by marketplaces.<br><br>In the minds of end-users, the software from Amazon, Apple, Google and Facebook are free. Microsoft is perceived as expensive. Microsoft still gets its money from selling software.<br><br>Microsoft is built on a business model that is rooted in selling software for money. This is anachronistic in the Internet age of Free.<br><br><strong>Farms — or, the user as products in a marketplace</strong><br><br>Amazon, Apple, Google and Facebook are like farms, where users are livestock that is being sold in a marketplace.<br><br>The way this works is: the company (Amazon, Apple, Facebook or Google) is the seller, the user &amp; his or her behaviour and data is the product, and suppliers, merchants, developers and advertisers are the buyers.<br><br>Take a minute to grok this: those you may usually call sellers — the supplier, the merchant, the developer, the advertiser — are now the buyers of “store-fronts” in a marketplace. I will use the term “merchant” going forward in this essay, but make no mistake — the merchant is the buyer in a marketplace, and the product is you.<br><br>Of course, the user needs to be enticed to enter the farm, and should be made to keep coming back. Amazon, Apple, Facebook and Google engineer this behaviour by building:<br>&gt; <em>   Singular meaning: Amazon is E-commerce. Apple is cool devices. Facebook is social. Google is search. Microsoft is ?<br>&gt; </em>   Identity systems: Uniquely identify users, and track their behaviour.<br>&gt; <em>   Social ties and news: Keep users coming back for more.<br>&gt; </em>   Recommendation systems: Program greater purchase.<br>&gt; <em>   Simple check-out and billing: Make it easy to act on a whim.<br>&gt; </em>   Great analytics: Understand and target users to buy more.<br>&gt; <em>   Devices: That funnel users into the farms.<br>Microsoft stands alone in not having a system for “selling” the user — go down the list above, and you’ll find that Microsoft doesn’t have any of these systems in place, at least in a way that is yet significant.<br><br>Microsoft believes in outmoded notions of selling software to users — instead of adopting the Internet age reality of selling users for money.<br><br><strong>Small — or, unbundled, bite-sized value</strong><br><br>In the eighties, we had albums, phone calls, newspapers and Microsoft Office. Today, we have singles, texts, Twitter and apps.<br><br>User value has become unbundled, and has become bite-sized.<br><br>As a marketplace — and if you have a large number of merchants — then this is great. Unbundled, bite-sized value provided to you by your merchants means that you can:<br>&gt; </em>   Reach the “long-tail” of users, and meet everyone’s unique needs.<br>&gt; <em>   Easily trigger purchase by users with small price-points.<br>&gt; </em>   Give users “tasting trials”, to keep them coming back for more.<br>&gt; <em>   Build “freemium” models, with in-app purchases for more value.<br>Microsoft has been unable to transform itself into a marketplace, where merchants deliver small, unbundled bite-sized value that consumers are willing to open their purse strings for.<br><br>Microsoft has remained rooted in the cold-war era of “big is better” and “let’s add more fire-power” — this is an Achilles heel in today’s world of small.<br><br>—<br><br>So, what must Microsoft do? The current strategy of “<a href="http://www.microsoft.com/en-us/news/press/2013/jul13/07-11memo.aspx" target="_blank" rel="external">Devices &amp; Services</a>” does not go far enough — it is a statement of facts, not of purpose. I believe that Microsoft needs to re-invent itself, much like Apple did or Intel has done over the years.<br><br>This will not be easy, and the path of re-invention needs to be unique to Microsoft’s challenges. Here are six things that I believe Microsoft must do to re-invent itself:<br>&gt; </em>   <strong>Find a visionary leader:</strong> Someone bold and decisive. Someone to set the direction and rally the troops. Someone who may get things wrong, but the few things that they get right — they are oh-so-right. This is what Microsoft needs now.<br>&gt; <em>   <strong>Become leaner and flatter</strong>: Microsoft has many employees spread across many divisions. It will add to this with the people from the Nokia deal. Microsoft needs to become leaner and flatter, by removing the chaff, bringing together its best people and focusing them narrowly.<br>&gt; </em>   <strong>Create a marketplace that users flock to</strong>: Difficult, but must do. My view: Focus on students, families &amp; personal productivity. Bring together Office, Bing, XBox and Phone. Make it simple, valuable and connected for end-users.<br>&gt; <em>   <strong>Win back developers</strong>: Become radically open. Contribute to the community. Make Azure free. Win back developers. This used to be Microsofts stronghold — it needs to regain this position of strength.<br>&gt; </em>   <strong>Create a singular identity</strong>: Seen <a href="https://medium.com/p/589ac77e5ddd/www.amazon.com," target="_blank" rel="external">www.amazon.com,</a><a href="https://medium.com/p/589ac77e5ddd/www.apple.com," target="_blank" rel="external">www.apple.com,</a><a href="https://medium.com/p/589ac77e5ddd/www.facebook.com" target="_blank" rel="external">www.facebook.com</a> or <a href="https://medium.com/p/589ac77e5ddd/www.google.com?" target="_blank" rel="external">www.google.com</a>? Now go to <a href="https://medium.com/p/589ac77e5ddd/www.microsoft.com." target="_blank" rel="external">www.microsoft.com</a>. Why are you there? Microsoft needs to create a singular identity and meaning in the minds of its end-users. Users need to think “<strong>My</strong> Microsoft” — not “Microsoft”.<br></div><br><div>—</div><br><div>The questions that Microsoft should answer are these:<br>&gt; <em>   On devices: Why did the iPod, iPhone and iPad succeed? . Why is Android winning? Why has the Kindle done well?<br>&gt; </em>   On services: Why is Google docs doing well? Why are developers flocking to Amazon Web Services? Why do all businesses use the Facebook platform?<br>The answer is simple: <strong>money follows users. </strong>So, Microsoft needs a narrowly focused plan to win back end-users to its platform.Everything else will follow.<br><br>However, for this, Microsoft needs to jettison its glorious past of selling packaged software, embrace an uncertain future and re-invent itself as a true Internet age company.<br><br>Can it be done? Absolutely — with bold action, and a pinch of fortune.<br><br><em>[</em><strong><em>Disclaimer</em></strong><em>: I was employed with Microsoft for ten years between 2003 and 2013. The thoughts and opinions in this post are solely mine. I invite your comments and discussion on this piece.]</em><br><br>(Cross posted from my post on <a href="https://medium.com/i-m-h-o/f30c44ba64c9" target="_blank" rel="external">Medium</a>)<br><br></div>
]]></content>
    <summary type="html">
    <![CDATA[<div><br><br><a href="http://act2.me/wp-content/uploads/2013/09/logo.png" target="_blank" rel="external"><img src="http://act2.me/wp-content]]>
    </summary>
    
      <category term="Tech" scheme="http://appapappa.com/categories/Tech/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Jump in, and get started!]]></title>
    <link href="http://appapappa.com/2013/09/10/archive/jump-in-and-get-started/"/>
    <id>http://appapappa.com/2013/09/10/archive/jump-in-and-get-started/</id>
    <published>2013-09-09T22:33:40.000Z</published>
    <updated>2015-05-17T14:53:34.000Z</updated>
    <content type="html"><![CDATA[<p><div><a href="http://stripgenerator.com/strip/763861/the-thinkers/" target="_blank" rel="external"><img src="http://s3.amazonaws.com/stripgenerator/strip/16/83/67/00/00/full.png" alt=""></a><br><a href="http://stripgenerator.com/strip/763861/the-thinkers/" target="_blank" rel="external">The Thinkers</a> by <a href="http://appapappa.stripgenerator.com/" title="appa" target="_blank" rel="external">appa</a></div><br><a id="more"></a>It is common-sense that to get done, you need to get started. However, there is a misconception that plagues us from action: that is that thinking about starting is the first step to starting.</p>
<p>This is not true.</p>
<p>In fact, this has the opposite effect: thinking about starting gives you many reasons to not start at all! I have suffered from this same disease. It is not uncommon among those of us who pride ourselves on being “rational”: this word is the first enemy of action.</p>
<p>The second enemy of action is: “quality”. The fact is that whatever is good, starts off being crap. You need to get going, and you need to get better, and you need to keep at it. Saying, “it’s not perfect, so let’s not do it” is what kills many great ideas before they’re born.</p>
<p>The beauty of it is that rationality and quality are fantastic, impenetrable defences: who would advise you to do the illogical, or to do poor quality work?</p>
<p>There is only one way to get started: <strong>JUMP IN</strong>. Now, immediately. No excuses. Before your brain kicks in. Do you want to write a book? Write the first line. Do you want to start a diet? Put down that Kit-kat you’re eating as you read this piece. Do you want to build a new web-development framework? Write “Hello, World”.</p>
<p>In my own battles against procrastination and time-wasting intellectual wanking, there are a few tips I’ve gathered:</p>
<blockquote>
<ul>
<li><strong>Focus on production:</strong> If you’re a dev, production is checking-in code. If you’re a tester, it’s opening bugs or writing test code. If you’re a designer, it is sketching a flow. If you’re a product manager, it is <strong>decision making</strong>.</li>
<li><strong>Produce daily</strong>: Make a list of 3 things you want to produce today - for product managers, this is 3 decisions to make. Don’t leave work till they’re done.</li>
<li><strong>What’s not production</strong>: Meetings, verbal agreements, thinking-time and lunch are not production.</li>
<li><strong>ABC:</strong> “Always be closing” applies to product managers too. If you haven’t closed, you haven’t produced. Closing is: discussing an issue with everyone concerned, making a decision on the direction, writing it down, communicating it to everyone, checking that everyone is OK with the decision and resolving any conflicts, and making sure everyone is on-board and knows what the decision is.</li>
<li><strong>Producing 1 daily is better than product 10 a week</strong>: Production requires focused effort. Production moves the product forward. Half-made decisions are counter-productive. So, close at least 1 daily. Don’t be half-way in a decision at the end of the day.<br>The neat thing about producing daily is this: it is deeply satisfying. The best cure I know for insomnia is to be dog-tired and happy with a days job well done. So, jump in - and get started!</li>
</ul>
</blockquote>
<p><a href="http://act2.me/daily-product-management/" target="_blank" rel="external">Daily Product Management</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><div><a href="http://stripgenerator.com/strip/763861/the-thinkers/"><img src="http://s3.amazonaws.com/stripgenerator/strip/16/83/67/00/00/full.png" alt=""></a><br><a href="http://stripgenerator.com/strip/763861/the-thinkers/">The Thinkers</a> by <a href="http://appapappa.stripgenerator.com/" title="appa">appa</a></div><br>]]>
    
    </summary>
    
      <category term="Product Management" scheme="http://appapappa.com/categories/Product-Management/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Venti Skinny Non-Fat Vanilla Macchiato]]></title>
    <link href="http://appapappa.com/2013/09/06/archive/new-programming-language-venti-skinny-non-fat-vanilla-macchiato/"/>
    <id>http://appapappa.com/2013/09/06/archive/new-programming-language-venti-skinny-non-fat-vanilla-macchiato/</id>
    <published>2013-09-06T09:59:00.000Z</published>
    <updated>2015-05-17T14:56:04.000Z</updated>
    <content type="html"><![CDATA[<p>Blame it on <a href="http://en.wikipedia.org/wiki/Java_(programming_language" target="_blank" rel="external">JAVA</a>#History). If Gosling hadn’t consumed prodigious amounts of the brew while creating the language, we wouldn’t have had that name. Then, we wouldn’t have had the name <a href="http://en.wikipedia.org/wiki/JavaScript" target="_blank" rel="external">JavaScript</a> (which was definitely a better name than <a href="http://en.wikipedia.org/wiki/ECMAScript" target="_blank" rel="external">ECMAScript</a>, which always sounded like it was inspired by a <a href="http://en.wikipedia.org/wiki/Eczema" target="_blank" rel="external">skin disease</a>!). And so, we wouldn’t have had languages like <a href="http://kavalang.com/" target="_blank" rel="external">Kava</a>, <a href="http://coffeescript.org/" target="_blank" rel="external">CoffeeScript</a>, <a href="http://maxtaco.github.io/coffee-script/" target="_blank" rel="external">IcedCoffee</a> or <a href="http://weepy.github.io/kaffeine/" target="_blank" rel="external">Kaffeine</a>,  testing libraries like <a href="http://visionmedia.github.io/mocha/" target="_blank" rel="external">Mocha</a> and <a href="http://chaijs.com/" target="_blank" rel="external">ChaiJS</a>  or code editors like <a href="http://macrabbit.com/espresso" target="_blank" rel="external">Espresso</a>!</p>
<p>Yesterday, I dreamt of a future in which I would be using a programming language with an obscure coffee-themed name. Well, they say the best way to invent the future is to create it - and so - here’s introducing my new programming language, a dialect of JavaScript…</p>
<h3 id="Venti_Skinny_Non-Fat_Vanilla_Macchiato">Venti Skinny Non-Fat Vanilla Macchiato</h3><p>Here are the founding principles of the language:</p>
<p>Key characteristics of this new programming environment:</p>
<p>Here’s how “Hello, World” looks in this language:</p>
<h2 id="hello-vsnfvm"><pre>hello.vsnfvm</pre></h2><p>filter.on(<br>    insert({“pod”:”sumatra”}),<br>    start() {<br>        while(filter.dripdripdrip) {<br>            dispenseShot(“Hello, World”);<br>            if (user.awake {<br>                filter.off();<br>            } else {<br>                sleep(20);<br>                insert({“pod”: “extra_shot”});<br>                continue;<br>            }<br>        }<br>    })<br>I will be putting up the GitHub link for this new language soon, do follow that for updates!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Blame it on <a href="http://en.wikipedia.org/wiki/Java_(programming_language" target="_blank" rel="external">JAVA</a>#History). If Goslin]]>
    </summary>
    
      <category term="Tech" scheme="http://appapappa.com/categories/Tech/"/>
    
  </entry>
  
</feed>